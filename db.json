{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1541487014044},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1541487014038},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1541487014039},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1541487014038},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1541487014045},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1541487014045},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1541487014047},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1541487014047},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1541487014046},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1541487014048},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1541487014048},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1541487014050},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1541487014051},{"_id":"themes/next/_config.yml","hash":"536a4b39b6d5f645582b0ebd4389c86ad4badc30","modified":1541487014051},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1541487014052},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1541487014088},{"_id":"source/about/index.md","hash":"680864d7392067e4ea73ea0ac23e67f57dedd230","modified":1541487014031},{"_id":"source/categories/index.md","hash":"3ef920aab919b8cd480a885c515243e0a421902a","modified":1541487014033},{"_id":"source/tags/index.md","hash":"a76547d4b7578fdc79bf2a5ec372a6bcaf5cdfec","modified":1541487014035},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1541487014040},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1541487014041},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1541487014042},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1541487014043},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1541487014052},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1541487014053},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1541487014053},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1541487014053},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1541487014054},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1541487014054},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1541487014054},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1541487014054},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1541487014054},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1541487014055},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1541487014055},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1541487014055},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1541487014055},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1541487014056},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1541487014057},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1541487014058},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1541487014060},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1541487014086},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1541487014086},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1541487014087},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1541487014087},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1541487014087},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1541487014087},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1541487014088},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1541487014089},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1541487014089},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1541487014213},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1541487014213},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1541487014213},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541487014136},{"_id":"source/_posts/cs/linux.md","hash":"d415cde2742b9eb0ddd91976495cbb2464cb70eb","modified":1537344814000},{"_id":"source/_posts/cs/loadbalance.md","hash":"b5f1aceb67c0d0e4292cb6825ca0e2dace48dcc9","modified":1541480852000},{"_id":"source/_posts/cs_base/linux.md","hash":"d415cde2742b9eb0ddd91976495cbb2464cb70eb","modified":1541487014029},{"_id":"source/_posts/idea/定一个目标.md","hash":"6d40584462fdfd923061ca0b6ae08b086374d708","modified":1537345713000},{"_id":"source/_posts/stack/road-map.md","hash":"4432e13dbdf4b96fdd993f8f25a8be70a0572795","modified":1539081128000},{"_id":"source/_posts/todo/todo.md","hash":"bca24b2128fac769de0b41c4e6e8331847a2ffe1","modified":1537430935000},{"_id":"source/_posts/tool/git-cheatcheet.md","hash":"6a5440f3d573b7b948936097a5c5be8f31684e32","modified":1541473325000},{"_id":"source/_posts/tool/常用工具使用.md","hash":"405ee13d57d64b34213349ac8a4f6fd9b22e96ce","modified":1537344791000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1541487014059},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1541487014059},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1541487014060},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1541487014060},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1541487014061},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1541487014061},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1541487014061},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1541487014061},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1541487014062},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1541487014062},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1541487014064},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1541487014064},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1541487014062},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1541487014064},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1541487014068},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1541487014064},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1541487014068},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1541487014070},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1541487014079},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1541487014080},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1541487014080},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1541487014080},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1541487014081},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1541487014082},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1541487014082},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1541487014090},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1541487014091},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1541487014091},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1541487014092},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1541487014093},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1541487014093},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1541487014093},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1541487014093},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1541487014094},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1541487014135},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1541487014137},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1541487014137},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1541487014138},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1541487014138},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1541487014139},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1541487014139},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1541487014139},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1541487014140},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1541487014140},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1541487014140},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1541487014141},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1541487014141},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541487014142},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1541487014142},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541487014142},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1541487014142},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1541487014143},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1541487014143},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541487014069},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541487014069},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541487014120},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541487014121},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541487014122},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541487014133},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541487014135},{"_id":"source/_posts/mit-6.824/lecture1/mapreduce-intro.md","hash":"39e4f4866896ace3bcb5bd336a67bcf858784981","modified":1537448115000},{"_id":"source/_posts/stack/golang/go-bytes-Buffer.md","hash":"4076425ddeabfe8eecc99a8fa92a5fb5d7d51169","modified":1537344366000},{"_id":"source/_posts/stack/golang/go-standard-library-intro.md","hash":"9d15993eee938e622317f294b705becf3c7bbcac","modified":1537963254000},{"_id":"source/_posts/stack/golang/go-踩坑点.md","hash":"43ace2217366253377f231ba6cd58cfd1f6ddae0","modified":1537344366000},{"_id":"source/_posts/stack/golang/go-通道channel.md","hash":"77c0334b4bd8893bbf5c7944d3b0bab66710c409","modified":1537344366000},{"_id":"source/_posts/stack/golang/go-文件io.md","hash":"4c6cc030fc559ff914cb811f037e4698889d311f","modified":1537503653000},{"_id":"source/_posts/stack/golang/go协程调度.md","hash":"3a71645bd8d69f2ffa2444c85990da4349ae2d45","modified":1537344366000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1541487014063},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1541487014064},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1541487014063},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1541487014065},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1541487014066},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1541487014066},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1541487014065},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1541487014067},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1541487014067},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1541487014069},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1541487014069},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1541487014069},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1541487014070},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1541487014070},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1541487014071},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1541487014071},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1541487014072},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1541487014071},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1541487014072},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1541487014072},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1541487014072},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1541487014073},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1541487014073},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1541487014073},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1541487014074},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1541487014076},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1541487014076},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1541487014077},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1541487014075},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1541487014078},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1541487014078},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1541487014078},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1541487014074},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1541487014079},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1541487014085},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1541487014084},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1541487014085},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1541487014085},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1541487014119},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1541487014120},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1541487014121},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1541487014122},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1541487014133},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1541487014133},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1541487014133},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1541487014134},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1541487014143},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1541487014144},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1541487014144},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1541487014143},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1541487014144},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1541487014144},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1541487014145},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1541487014145},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1541487014146},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1541487014146},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1541487014146},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1541487014150},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1541487014160},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1541487014153},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1541487014153},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1541487014160},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1541487014160},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1541487014160},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1541487014161},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1541487014162},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1541487014163},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1541487014164},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1541487014165},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1541487014185},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1541487014188},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1541487014188},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1541487014189},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1541487014189},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1541487014191},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1541487014190},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1541487014191},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1541487014191},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1541487014193},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1541487014194},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1541487014192},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1541487014195},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1541487014195},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1541487014196},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1541487014197},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1541487014193},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1541487014196},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1541487014198},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1541487014199},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1541487014200},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1541487014200},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1541487014199},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1541487014201},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1541487014202},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1541487014203},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1541487014210},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1541487014203},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1541487014211},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1541487014213},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1541487014212},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1541487014212},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1541487014186},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1541487014083},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1541487014084},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1541487014094},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1541487014094},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1541487014095},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1541487014095},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1541487014095},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1541487014100},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1541487014107},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1541487014116},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1541487014117},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1541487014117},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1541487014117},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1541487014117},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1541487014117},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1541487014118},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1541487014124},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1541487014124},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1541487014123},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1541487014124},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1541487014125},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1541487014126},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1541487014126},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1541487014127},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1541487014130},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1541487014130},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1541487014131},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1541487014131},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1541487014131},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1541487014131},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1541487014132},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1541487014132},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1541487014132},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1541487014132},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1541487014132},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1541487014148},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1541487014150},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1541487014149},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1541487014146},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1541487014154},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1541487014155},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1541487014156},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1541487014156},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1541487014155},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1541487014158},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1541487014156},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1541487014159},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1541487014159},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1541487014161},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1541487014161},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1541487014166},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1541487014167},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1541487014167},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1541487014209},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1541487014209},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1541487014149},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541487014183},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541487014181},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1541487014212},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1541487014096},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1541487014097},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1541487014097},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1541487014097},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1541487014098},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1541487014098},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1541487014099},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1541487014099},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1541487014099},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1541487014100},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1541487014100},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1541487014100},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1541487014099},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1541487014100},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1541487014101},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1541487014101},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1541487014101},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1541487014102},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1541487014102},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1541487014102},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1541487014103},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1541487014103},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1541487014103},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1541487014103},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1541487014104},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1541487014104},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1541487014104},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1541487014104},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1541487014105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1541487014105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1541487014105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1541487014106},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1541487014106},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1541487014106},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1541487014106},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1541487014106},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1541487014107},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1541487014107},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1541487014107},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1541487014108},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1541487014109},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1541487014109},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1541487014109},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1541487014109},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1541487014111},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1541487014110},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1541487014111},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1541487014112},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1541487014111},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1541487014113},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1541487014113},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1541487014114},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1541487014115},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1541487014115},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1541487014114},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1541487014115},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1541487014116},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1541487014128},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1541487014129},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1541487014115},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1541487014131},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1541487014147},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1541487014147},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1541487014148},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1541487014147},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1541487014148},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1541487014157},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1541487014157},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1541487014157},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1541487014157},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1541487014158},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1541487014158},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1541487014170},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541487014173},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1541487014178},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1541487014152},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1541487014206},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1541487014176},{"_id":"public/categories/index.html","hash":"6dbecb77b83b0259fef311aabc60f983422f4506","modified":1541488495686},{"_id":"public/about/index.html","hash":"ba6d1c8801aa593910d06e3c500b340062458599","modified":1541488495686},{"_id":"public/tags/index.html","hash":"d4483cf778f3477e2923658f7d64c7e59da30ecd","modified":1541488495687},{"_id":"public/2018/10/09/stack/road-map/index.html","hash":"673438494bfcd65afc764edcdcde355aa14bc9b3","modified":1541488495687},{"_id":"public/2018/09/26/stack/golang/go-standard-library-intro/index.html","hash":"e318095c5608a90dc467c0b7a8207976fabc0917","modified":1541488495687},{"_id":"public/2018/09/19/todo/todo/index.html","hash":"f21250bc6ad37cd5dc3da7464b58faa1e54de233","modified":1541488495687},{"_id":"public/2018/07/21/idea/定一个目标/index.html","hash":"044dfc49ca265091a38a4299b81483117edb0a1b","modified":1541488495687},{"_id":"public/archives/page/2/index.html","hash":"2b9eaf2880b0ea7f7a8e8069a904f7e2adae1476","modified":1541488495687},{"_id":"public/archives/2018/page/2/index.html","hash":"fd601a8c5405819ef4dbb3bae651dd7165228bf9","modified":1541488495687},{"_id":"public/archives/2018/07/index.html","hash":"e80918ec121449f9093730f316b69896cefa6480","modified":1541488495687},{"_id":"public/archives/2018/10/index.html","hash":"e0364dcfbbbed45bfa6e82ea4be175846e86c4e0","modified":1541488495687},{"_id":"public/tags/linux/index.html","hash":"af8edbf12e2fc377483586fcb09159a0f751e244","modified":1541488495687},{"_id":"public/tags/cmd/index.html","hash":"bdf33c8e2ef0b10916483e976a3b66013382c0f4","modified":1541488495687},{"_id":"public/tags/标签/index.html","hash":"907221e2038ecd0312e978d42bb14861048cde1c","modified":1541488495687},{"_id":"public/tags/计划/index.html","hash":"390f12a23159fc4b4251a40ce082464fcd6a9999","modified":1541488495687},{"_id":"public/tags/目标/index.html","hash":"d09fe83b3e40175deb806a44c74ea9116d444e52","modified":1541488495687},{"_id":"public/tags/roadmap/index.html","hash":"d9138c76cf7a1ad16d4112a993dac8181717424b","modified":1541488495687},{"_id":"public/tags/todo/index.html","hash":"b0c5c3fe4ca7021f2307baa1e36ab3cde26ffe58","modified":1541488495687},{"_id":"public/tags/git/index.html","hash":"0546a4087851838ea998af72e0b9614e9441b9b7","modified":1541488495688},{"_id":"public/tags/vscode/index.html","hash":"cd365a2cbedc7196b3e228ec387155fa8dd920d0","modified":1541488495688},{"_id":"public/tags/mapreduce/index.html","hash":"1d083e328260137a605af0d593fc0da6df13e8c5","modified":1541488495688},{"_id":"public/tags/buffer/index.html","hash":"45aee19d909c3738d40b91db4f17e3e149bd07e2","modified":1541488495688},{"_id":"public/tags/标准库/index.html","hash":"640fe09abc1af9e185140913b716c8a7e7d15c65","modified":1541488495688},{"_id":"public/tags/go/index.html","hash":"9e8e1a853c64b71507afc3fef474149d013c79e7","modified":1541488495688},{"_id":"public/categories/linux/index.html","hash":"822c2413185b69620f3b89caac1d3e5ad804ed86","modified":1541488495688},{"_id":"public/categories/分类/index.html","hash":"bc9810f000719feb549840cf77975915bd72be0b","modified":1541488495688},{"_id":"public/categories/idea/index.html","hash":"dbba553b471c5ee4fcb17ed6b6c03b72e7e78873","modified":1541488495688},{"_id":"public/categories/cs/index.html","hash":"e2765262529ffe61af59716b4f0205b21be01244","modified":1541488495688},{"_id":"public/categories/todo/index.html","hash":"d55b4dcb2101824f5e74aa85dd23a5bbfc9c8c57","modified":1541488495688},{"_id":"public/categories/tool/index.html","hash":"a55f9c467ef9a23b84cb21a531a7051ca1c0f516","modified":1541488495688},{"_id":"public/categories/分布式/index.html","hash":"c2be1c7b189f537b963e8fb189f27d4ae170a5a2","modified":1541488495688},{"_id":"public/categories/go/index.html","hash":"a1e7931b04a4a2a064b34dd791d43b6083002f84","modified":1541488495688},{"_id":"public/2018/10/12/cs/loadbalance/index.html","hash":"d8039bf42d090b046de6ffbce80150deb9194129","modified":1541488495688},{"_id":"public/2018/09/20/mit-6.824/lecture1/mapreduce-intro/index.html","hash":"c578f7d7a87b27ca370e071c2f1cddda6224176b","modified":1541488495688},{"_id":"public/2018/09/19/tool/git-cheatcheet/index.html","hash":"a402ff8fb960417d40d4adcb8bc9acfb0cc27d1b","modified":1541488495688},{"_id":"public/2018/09/19/stack/golang/go-bytes-Buffer/index.html","hash":"2f8e636a912395c5612de1fb1e6d17ffd02c2f70","modified":1541488495688},{"_id":"public/2018/09/19/tool/常用工具使用/index.html","hash":"8a87b4849b35af3113639172473f4bafc961b4b0","modified":1541488495688},{"_id":"public/2018/09/19/stack/golang/go-踩坑点/index.html","hash":"a9dd64348190b9956f96abd0e2bb47d034c9391a","modified":1541488495688},{"_id":"public/2018/09/19/stack/golang/go-通道channel/index.html","hash":"7ce718880e761a266e27962fc41d86c0fb8d68f5","modified":1541488495688},{"_id":"public/2018/09/19/stack/golang/go-文件io/index.html","hash":"318eca0b2dd8afffc058bf5d855fbb0a3d2e00c1","modified":1541488495688},{"_id":"public/2018/09/19/stack/golang/go协程调度/index.html","hash":"50963d84e6b1736e45ea735ebf2c59d48f543c75","modified":1541488495688},{"_id":"public/2018/07/21/cs_base/linux/index.html","hash":"b8b61b0d0f21d9d2c8447cb37ba7660bf0fae16e","modified":1541488495689},{"_id":"public/2018/07/21/cs/linux/index.html","hash":"3e8a4b5f0b9175bb96e376809a6b382d25ab6dca","modified":1541488495689},{"_id":"public/archives/index.html","hash":"c11ab8f66c8b82065c6eee9a507474a118b34eec","modified":1541488495689},{"_id":"public/archives/2018/index.html","hash":"d54d743b08c854e58e3beeefd1bd32a6adf3d718","modified":1541488495689},{"_id":"public/archives/2018/09/index.html","hash":"7d8c19b227325aa998900e54eef5df70bc373763","modified":1541488495689},{"_id":"public/index.html","hash":"e3c0335a42e8916595306c850dbe964539914b6b","modified":1541488495689},{"_id":"public/page/2/index.html","hash":"021b2e892a89c9243f405874bdd158b3040b8980","modified":1541488495689},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1541488495705},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1541488495705},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1541488495705},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1541488495705},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1541488495705},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1541488495705},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1541488495705},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1541488495705},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1541488495705},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1541488495705},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1541488495705},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1541488495706},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541488495706},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1541488495706},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541488495706},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1541488495706},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1541488495706},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1541488495706},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1541488495707},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1541488495707},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1541488495707},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1541488495707},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1541488495707},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1541488495707},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1541488495707},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1541488495707},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1541488495707},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1541488495707},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1541488495707},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1541488495707},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1541488495707},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1541488495707},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1541488495707},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541488495767},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541488495848},{"_id":"public/css/main.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541488495875},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1541488495875},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1541488495875},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1541488495875},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1541488495875},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1541488495875},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1541488495875},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1541488495875},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1541488495875},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1541488495875},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1541488495875},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1541488495875},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1541488495876},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1541488495876},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1541488495876},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1541488495876},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1541488495876},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1541488495876},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1541488495876},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1541488495876},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1541488495876},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1541488495876},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1541488495876},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1541488495876},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1541488495876},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1541488495876},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1541488495876},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1541488495876},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1541488495876},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1541488495877},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1541488495877},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1541488495877},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1541488495877},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1541488495877},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1541488495877},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1541488495877},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1541488495877},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1541488495878},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1541488495879},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1541488495879},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1541488495880},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1541488495880},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1541488495880},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1541488495880},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1541488495880},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1541488495880},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1541488495880},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1541488495880},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1541488495880},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1541488495880},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1541488495880},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1541488495880},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1541488495880},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1541488495880},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1541488495880},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1541488495881},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1541488495881},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1541488495881},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1541488495881},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541488495881},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1541488495881},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1541488495911}],"Category":[{"name":"linux","_id":"cjo5eg4hw0005lls6p09h40ye"},{"name":"分类","_id":"cjo5eg4i5000alls68gdp5y4i"},{"name":"idea","_id":"cjo5eg4ie000klls62jcvx9lq"},{"name":"cs","_id":"cjo5eg4if000plls6subeyezj"},{"name":"todo","_id":"cjo5eg4ig000tlls6qbfa2fny"},{"name":"tool","_id":"cjo5eg4ig000ylls6qtm53rv8"},{"name":"分布式","_id":"cjo5eg4lb001flls602h6rerg"},{"name":"go","_id":"cjo5eg4lg001klls6pr9arjb9"}],"Data":[],"Page":[{"title":"categories","date":"2018-07-14T03:45:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-07-14 11:45:26\ntype: \"categories\"\n---\n","updated":"2018-11-06T06:50:14.033Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjo5eg4a90000lls6rjxxlz9n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-07-14T03:47:31.000Z","_content":"\n# 关于我\n\n职业：golang开发工程师\nEmail：fruitbag@163.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-07-14 11:47:31\n---\n\n# 关于我\n\n职业：golang开发工程师\nEmail：fruitbag@163.com","updated":"2018-11-06T06:50:14.031Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjo5eg4ab0001lls6pjh1gx3j","content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>职业：golang开发工程师<br>Email：<a href=\"mailto:fruitbag@163.com\" target=\"_blank\" rel=\"noopener\">fruitbag@163.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>职业：golang开发工程师<br>Email：<a href=\"mailto:fruitbag@163.com\" target=\"_blank\" rel=\"noopener\">fruitbag@163.com</a></p>\n"},{"title":"tags","date":"2018-07-14T03:44:37.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-14 11:44:37\ntype: \"tags\"\n---\n","updated":"2018-11-06T06:50:14.035Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjo5eg4gb0002lls6ahcjxpzv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"linux 服务器常用命令整理","date":"2018-07-21T13:24:15.000Z","_content":"\n# linux 服务器常用命令整理\n\n### 目录\n\n- **网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload**\n- **网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc**\n- **抓包工具 - charles**\n- **内存检查 - free \\ meminfo**\n- **系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat**\n- **系统调用追踪 - strace \\ gcore**\n- **文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate**\n- **开发效率 - tmux**\n\n### 常见命令\n\n#### tcpdump\n\n1. tcp:用来过滤数据报的类型\n2. -i eth1 : 只抓经过接口eth1的包\n3. -t : 不显示时间戳\n4. -s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包\n5. -c 100 : 只抓取100个数据包\n6. dst port !22: 不抓取目标端口是22数据包\n7. src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24\n8. -A：显示数据包内容 \n\n示例：\n\n`tcpdump -i any -v port 8888`\n\n`tcpdump -i any -A port 8888  `\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg)\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg)\n\n\n\n#### netstat\n\n查看所有连接\n\n`netstat -autnp`\n\n查看监听的tcp服务\n\n`netstat -altnp`  \n\n看tcp端口\n\n`netstat -ltnp`\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg)\n\n\n\n#### ss\n\n- `ss -pl`   查看每个进程及其监听的端口\n- `ss -t -a`  查看所有的tcp连接\n- `ss -u -a`  查看所有的udp连接\n\n#### lsof\n\n- `lsof -i :8888`  查看端口8888进程信息\n- `lsof -p 7915` 查看进程7915打开的fd信息\n\n#### scp\n\n- `scp -r src remote:/tmp`  本地拷贝到远端\n- `scp -r remote:/tmp/src .`  远端拷贝到本地\n- `scp -3  remote:/tmp/a.tar   remote2:/tmp/`  以本地为跳板机，将remote机器上文件拷贝到remote2\n\n#### rsync\n\n- `rsync -av /home/mail/ 192.168.11.12:/home/mail/`\n- `rsync -av 192.168.11.11:/home/mail/ /home/mail/`\n\n#### nc\n\n- `nc -l 8888`   本地启动8888端口\n- `nc -l 8888 > a.tgz`   接收文件\n- `nc ali-.bj:8888   < a.tgz` 发送文件到远端\n\n#### vmstat\n\n- `vmstat 1 10`对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。\n- 对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。\n\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg)\n\n\n\n#### iostat\n\n- `iostat -x` 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg)\n\n\n\n#### top\n\n- 1  按CPU核数查看\n- P\n- M\n- c 查看完整进程命令\n- top -Hp pid  查看线程数\n\n#### ps\n\n- `ps -eo “pid,cmd,lstart”  | grep pid`   查看进程启动时间\n- `ps -ef f`  查看最近进程（常用）\n\n#### find\n\n- `find . -type f -mtime +3`   修改时间大于3天的文件\n- `find . -type f -mtime +3 | xargs rm -rf`  查找并删除\n\n#### du\n\n- `du -sk * | sort -n | cut -f2 | xargs -d '\\n' du -sh` 按文件大小排序显示\n- `du -hs` 常用\n\n#### awk\n\n`grep 'update_profile.*Android' access-20180131.log |awk -F 'POST' '{print $2}'|awk -F '&' '{print $26}'|awk -F ' ' '{print $1}'|awk -F '=' '{print $2}'|sort -n|uniq -c|sort -nr|head -100`\n\n-F 以空格分割","source":"_posts/cs/linux.md","raw":"---\ntitle: linux 服务器常用命令整理\ndate: 2018-07-21 21:24:15\ncategories: \n- linux\ntags: \n- linux\n- cmd\n---\n\n# linux 服务器常用命令整理\n\n### 目录\n\n- **网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload**\n- **网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc**\n- **抓包工具 - charles**\n- **内存检查 - free \\ meminfo**\n- **系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat**\n- **系统调用追踪 - strace \\ gcore**\n- **文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate**\n- **开发效率 - tmux**\n\n### 常见命令\n\n#### tcpdump\n\n1. tcp:用来过滤数据报的类型\n2. -i eth1 : 只抓经过接口eth1的包\n3. -t : 不显示时间戳\n4. -s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包\n5. -c 100 : 只抓取100个数据包\n6. dst port !22: 不抓取目标端口是22数据包\n7. src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24\n8. -A：显示数据包内容 \n\n示例：\n\n`tcpdump -i any -v port 8888`\n\n`tcpdump -i any -A port 8888  `\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg)\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg)\n\n\n\n#### netstat\n\n查看所有连接\n\n`netstat -autnp`\n\n查看监听的tcp服务\n\n`netstat -altnp`  \n\n看tcp端口\n\n`netstat -ltnp`\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg)\n\n\n\n#### ss\n\n- `ss -pl`   查看每个进程及其监听的端口\n- `ss -t -a`  查看所有的tcp连接\n- `ss -u -a`  查看所有的udp连接\n\n#### lsof\n\n- `lsof -i :8888`  查看端口8888进程信息\n- `lsof -p 7915` 查看进程7915打开的fd信息\n\n#### scp\n\n- `scp -r src remote:/tmp`  本地拷贝到远端\n- `scp -r remote:/tmp/src .`  远端拷贝到本地\n- `scp -3  remote:/tmp/a.tar   remote2:/tmp/`  以本地为跳板机，将remote机器上文件拷贝到remote2\n\n#### rsync\n\n- `rsync -av /home/mail/ 192.168.11.12:/home/mail/`\n- `rsync -av 192.168.11.11:/home/mail/ /home/mail/`\n\n#### nc\n\n- `nc -l 8888`   本地启动8888端口\n- `nc -l 8888 > a.tgz`   接收文件\n- `nc ali-.bj:8888   < a.tgz` 发送文件到远端\n\n#### vmstat\n\n- `vmstat 1 10`对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。\n- 对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。\n\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg)\n\n\n\n#### iostat\n\n- `iostat -x` 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg)\n\n\n\n#### top\n\n- 1  按CPU核数查看\n- P\n- M\n- c 查看完整进程命令\n- top -Hp pid  查看线程数\n\n#### ps\n\n- `ps -eo “pid,cmd,lstart”  | grep pid`   查看进程启动时间\n- `ps -ef f`  查看最近进程（常用）\n\n#### find\n\n- `find . -type f -mtime +3`   修改时间大于3天的文件\n- `find . -type f -mtime +3 | xargs rm -rf`  查找并删除\n\n#### du\n\n- `du -sk * | sort -n | cut -f2 | xargs -d '\\n' du -sh` 按文件大小排序显示\n- `du -hs` 常用\n\n#### awk\n\n`grep 'update_profile.*Android' access-20180131.log |awk -F 'POST' '{print $2}'|awk -F '&' '{print $26}'|awk -F ' ' '{print $1}'|awk -F '=' '{print $2}'|sort -n|uniq -c|sort -nr|head -100`\n\n-F 以空格分割","slug":"cs/linux","published":1,"updated":"2018-09-19T08:13:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4hm0003lls6r4xf455t","content":"<h1 id=\"linux-服务器常用命令整理\"><a href=\"#linux-服务器常用命令整理\" class=\"headerlink\" title=\"linux 服务器常用命令整理\"></a>linux 服务器常用命令整理</h1><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><strong>网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload</strong></li>\n<li><strong>网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc</strong></li>\n<li><strong>抓包工具 - charles</strong></li>\n<li><strong>内存检查 - free \\ meminfo</strong></li>\n<li><strong>系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat</strong></li>\n<li><strong>系统调用追踪 - strace \\ gcore</strong></li>\n<li><strong>文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate</strong></li>\n<li><strong>开发效率 - tmux</strong></li>\n</ul>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><h4 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h4><ol>\n<li>tcp:用来过滤数据报的类型</li>\n<li>-i eth1 : 只抓经过接口eth1的包</li>\n<li>-t : 不显示时间戳</li>\n<li>-s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包</li>\n<li>-c 100 : 只抓取100个数据包</li>\n<li>dst port !22: 不抓取目标端口是22数据包</li>\n<li>src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24</li>\n<li>-A：显示数据包内容 </li>\n</ol>\n<p>示例：</p>\n<p><code>tcpdump -i any -v port 8888</code></p>\n<p><code>tcpdump -i any -A port 8888</code></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg\" alt=\"\"></p>\n<h4 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h4><p>查看所有连接</p>\n<p><code>netstat -autnp</code></p>\n<p>查看监听的tcp服务</p>\n<p><code>netstat -altnp</code>  </p>\n<p>看tcp端口</p>\n<p><code>netstat -ltnp</code></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg\" alt=\"\"></p>\n<h4 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h4><ul>\n<li><code>ss -pl</code>   查看每个进程及其监听的端口</li>\n<li><code>ss -t -a</code>  查看所有的tcp连接</li>\n<li><code>ss -u -a</code>  查看所有的udp连接</li>\n</ul>\n<h4 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h4><ul>\n<li><code>lsof -i :8888</code>  查看端口8888进程信息</li>\n<li><code>lsof -p 7915</code> 查看进程7915打开的fd信息</li>\n</ul>\n<h4 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h4><ul>\n<li><code>scp -r src remote:/tmp</code>  本地拷贝到远端</li>\n<li><code>scp -r remote:/tmp/src .</code>  远端拷贝到本地</li>\n<li><code>scp -3  remote:/tmp/a.tar   remote2:/tmp/</code>  以本地为跳板机，将remote机器上文件拷贝到remote2</li>\n</ul>\n<h4 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h4><ul>\n<li><code>rsync -av /home/mail/ 192.168.11.12:/home/mail/</code></li>\n<li><code>rsync -av 192.168.11.11:/home/mail/ /home/mail/</code></li>\n</ul>\n<h4 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h4><ul>\n<li><code>nc -l 8888</code>   本地启动8888端口</li>\n<li><code>nc -l 8888 &gt; a.tgz</code>   接收文件</li>\n<li><code>nc ali-.bj:8888   &lt; a.tgz</code> 发送文件到远端</li>\n</ul>\n<h4 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h4><ul>\n<li><code>vmstat 1 10</code>对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。</li>\n<li>对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg\" alt=\"\"></p>\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><ul>\n<li><code>iostat -x</code> 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的</li>\n</ul>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg\" alt=\"\"></p>\n<h4 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h4><ul>\n<li>1  按CPU核数查看</li>\n<li>P</li>\n<li>M</li>\n<li>c 查看完整进程命令</li>\n<li>top -Hp pid  查看线程数</li>\n</ul>\n<h4 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h4><ul>\n<li><code>ps -eo “pid,cmd,lstart”  | grep pid</code>   查看进程启动时间</li>\n<li><code>ps -ef f</code>  查看最近进程（常用）</li>\n</ul>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><ul>\n<li><code>find . -type f -mtime +3</code>   修改时间大于3天的文件</li>\n<li><code>find . -type f -mtime +3 | xargs rm -rf</code>  查找并删除</li>\n</ul>\n<h4 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h4><ul>\n<li><code>du -sk * | sort -n | cut -f2 | xargs -d &#39;\\n&#39; du -sh</code> 按文件大小排序显示</li>\n<li><code>du -hs</code> 常用</li>\n</ul>\n<h4 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h4><p><code>grep &#39;update_profile.*Android&#39; access-20180131.log |awk -F &#39;POST&#39; &#39;{print $2}&#39;|awk -F &#39;&amp;&#39; &#39;{print $26}&#39;|awk -F &#39; &#39; &#39;{print $1}&#39;|awk -F &#39;=&#39; &#39;{print $2}&#39;|sort -n|uniq -c|sort -nr|head -100</code></p>\n<p>-F 以空格分割</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux-服务器常用命令整理\"><a href=\"#linux-服务器常用命令整理\" class=\"headerlink\" title=\"linux 服务器常用命令整理\"></a>linux 服务器常用命令整理</h1><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><strong>网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload</strong></li>\n<li><strong>网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc</strong></li>\n<li><strong>抓包工具 - charles</strong></li>\n<li><strong>内存检查 - free \\ meminfo</strong></li>\n<li><strong>系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat</strong></li>\n<li><strong>系统调用追踪 - strace \\ gcore</strong></li>\n<li><strong>文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate</strong></li>\n<li><strong>开发效率 - tmux</strong></li>\n</ul>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><h4 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h4><ol>\n<li>tcp:用来过滤数据报的类型</li>\n<li>-i eth1 : 只抓经过接口eth1的包</li>\n<li>-t : 不显示时间戳</li>\n<li>-s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包</li>\n<li>-c 100 : 只抓取100个数据包</li>\n<li>dst port !22: 不抓取目标端口是22数据包</li>\n<li>src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24</li>\n<li>-A：显示数据包内容 </li>\n</ol>\n<p>示例：</p>\n<p><code>tcpdump -i any -v port 8888</code></p>\n<p><code>tcpdump -i any -A port 8888</code></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg\" alt=\"\"></p>\n<h4 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h4><p>查看所有连接</p>\n<p><code>netstat -autnp</code></p>\n<p>查看监听的tcp服务</p>\n<p><code>netstat -altnp</code>  </p>\n<p>看tcp端口</p>\n<p><code>netstat -ltnp</code></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg\" alt=\"\"></p>\n<h4 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h4><ul>\n<li><code>ss -pl</code>   查看每个进程及其监听的端口</li>\n<li><code>ss -t -a</code>  查看所有的tcp连接</li>\n<li><code>ss -u -a</code>  查看所有的udp连接</li>\n</ul>\n<h4 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h4><ul>\n<li><code>lsof -i :8888</code>  查看端口8888进程信息</li>\n<li><code>lsof -p 7915</code> 查看进程7915打开的fd信息</li>\n</ul>\n<h4 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h4><ul>\n<li><code>scp -r src remote:/tmp</code>  本地拷贝到远端</li>\n<li><code>scp -r remote:/tmp/src .</code>  远端拷贝到本地</li>\n<li><code>scp -3  remote:/tmp/a.tar   remote2:/tmp/</code>  以本地为跳板机，将remote机器上文件拷贝到remote2</li>\n</ul>\n<h4 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h4><ul>\n<li><code>rsync -av /home/mail/ 192.168.11.12:/home/mail/</code></li>\n<li><code>rsync -av 192.168.11.11:/home/mail/ /home/mail/</code></li>\n</ul>\n<h4 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h4><ul>\n<li><code>nc -l 8888</code>   本地启动8888端口</li>\n<li><code>nc -l 8888 &gt; a.tgz</code>   接收文件</li>\n<li><code>nc ali-.bj:8888   &lt; a.tgz</code> 发送文件到远端</li>\n</ul>\n<h4 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h4><ul>\n<li><code>vmstat 1 10</code>对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。</li>\n<li>对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg\" alt=\"\"></p>\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><ul>\n<li><code>iostat -x</code> 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的</li>\n</ul>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg\" alt=\"\"></p>\n<h4 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h4><ul>\n<li>1  按CPU核数查看</li>\n<li>P</li>\n<li>M</li>\n<li>c 查看完整进程命令</li>\n<li>top -Hp pid  查看线程数</li>\n</ul>\n<h4 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h4><ul>\n<li><code>ps -eo “pid,cmd,lstart”  | grep pid</code>   查看进程启动时间</li>\n<li><code>ps -ef f</code>  查看最近进程（常用）</li>\n</ul>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><ul>\n<li><code>find . -type f -mtime +3</code>   修改时间大于3天的文件</li>\n<li><code>find . -type f -mtime +3 | xargs rm -rf</code>  查找并删除</li>\n</ul>\n<h4 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h4><ul>\n<li><code>du -sk * | sort -n | cut -f2 | xargs -d &#39;\\n&#39; du -sh</code> 按文件大小排序显示</li>\n<li><code>du -hs</code> 常用</li>\n</ul>\n<h4 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h4><p><code>grep &#39;update_profile.*Android&#39; access-20180131.log |awk -F &#39;POST&#39; &#39;{print $2}&#39;|awk -F &#39;&amp;&#39; &#39;{print $26}&#39;|awk -F &#39; &#39; &#39;{print $1}&#39;|awk -F &#39;=&#39; &#39;{print $2}&#39;|sort -n|uniq -c|sort -nr|head -100</code></p>\n<p>-F 以空格分割</p>\n"},{"title":"loadbalance","date":"2018-10-12T08:56:16.000Z","_content":"\n# 负载均衡\n当一台服务器的承受能力达到上限时，那么就需要多台服务器来组成集群，提升应用整体的吞吐量，那么这个时候就涉及到如何合理分配客户端请求到集群中不同的机器，这个过程就叫做负载均衡，当然这也是负载均衡要解决的问题。\n\n### 实现：\n模拟Ip列表：\n```java\n 1 public class IpMap\n 2 {\n 3     // 待路由的Ip列表，Key代表Ip，Value代表该Ip的权重\n 4     public static HashMap<String, Integer> serverWeightMap = \n 5             new HashMap<String, Integer>();\n 6     \n 7     static\n 8     {\n 9         serverWeightMap.put(\"192.168.1.100\", 1);\n10         serverWeightMap.put(\"192.168.1.101\", 1);\n11         // 权重为4\n12         serverWeightMap.put(\"192.168.1.102\", 4);\n13         serverWeightMap.put(\"192.168.1.103\", 1);\n14         serverWeightMap.put(\"192.168.1.104\", 1);\n15         // 权重为3\n16         serverWeightMap.put(\"192.168.1.105\", 3);\n17         serverWeightMap.put(\"192.168.1.106\", 1);\n18         // 权重为2\n19         serverWeightMap.put(\"192.168.1.107\", 2);\n20         serverWeightMap.put(\"192.168.1.108\", 1);\n21         serverWeightMap.put(\"192.168.1.109\", 1);\n22         serverWeightMap.put(\"192.168.1.110\", 1);\n23     }\n24 }\n```\n \n轮询（Round Robin）法\n轮询法即Round Robin法，其代码实现大致如下：\n```java\n 1 public class RoundRobin\n 2 {\n 3     private static Integer pos = 0;\n 4     \n 5     public static String getServer()\n 6     {\n 7         // 重建一个Map，避免服务器的上下线导致的并发问题\n 8         Map<String, Integer> serverMap = \n 9                 new HashMap<String, Integer>();\n10         serverMap.putAll(IpMap.serverWeightMap);\n11         \n12         // 取得Ip地址List\n13         Set<String> keySet = serverMap.keySet();\n14         ArrayList<String> keyList = new ArrayList<String>();\n15         keyList.addAll(keySet);\n16         \n17         String server = null;\n18         synchronized (pos)\n19         {\n20             if (pos >= keySet.size())\n21                 pos = 0;\n22             server = keyList.get(pos);\n23             pos ++;\n24         }\n25         \n26         return server;\n27     }\n28 }\n```\n由于serverWeightMap中的地址列表是动态的，随时可能有机器上线、下线或者宕机，因此为了避免可能出现的并发问题，方法内部要新建局部变量serverMap，现将serverMap中的内容复制到线程本地，以避免被多个线程修改。这样可能会引入新的问题，复制以后serverWeightMap的修改无法反映给serverMap，也就是说这一轮选择服务器的过程中，新增服务器或者下线服务器，负载均衡算法将无法获知。新增无所谓，如果有服务器下线或者宕机，那么可能会访问到不存在的地址。因此，服务调用端需要有相应的容错处理，比如重新发起一次server选择并调用。\n对于当前轮询的位置变量pos，为了保证服务器选择的顺序性，需要在操作时对其加锁，使得同一时刻只能有一个线程可以修改pos的值，否则当pos变量被并发修改，则无法保证服务器选择的顺序性，甚至有可能导致keyList数组越界。\n轮询法的优点在于：试图做到请求转移的绝对均衡。\n轮询法的缺点在于：为了做到请求转移的绝对均衡，必须付出相当大的代价，因为为了保证pos变量修改的互斥性，需要引入重量级的悲观锁synchronized，这将会导致该段轮询代码的并发吞吐量发生明显的下降。\n \n随机（Random）法\n通过系统随机函数，根据后端服务器列表的大小值来随机选择其中一台进行访问。由概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到每一台后端服务器，也就是轮询的效果。\n随机法的代码实现大致如下：\n```java\n 1 public class Random\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         ArrayList<String> keyList = new ArrayList<String>();\n13         keyList.addAll(keySet);\n14         \n15         java.util.Random random = new java.util.Random();\n16         int randomPos = random.nextInt(keyList.size());\n17         \n18         return keyList.get(randomPos);\n19     }\n20 }\n```\n整体代码思路和轮询法一致，先重建serverMap，再获取到server列表。在选取server的时候，通过Random的nextInt方法取0~keyList.size()区间的一个随机值，从而从服务器列表中随机获取到一台服务器地址进行返回。基于概率统计的理论，吞吐量越大，随机算法的效果越接近于轮询算法的效果。\n \n源地址哈希（Hash）法\n源地址哈希的思想是获取客户端访问的IP地址值，通过哈希函数计算得到一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是要访问的服务器的序号。源地址哈希算法的代码实现大致如下：\n```java\n 1 public class Hash\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         ArrayList<String> keyList = new ArrayList<String>();\n13         keyList.addAll(keySet);\n14         \n15         // 在Web应用中可通过HttpServlet的getRemoteIp方法获取\n16         String remoteIp = \"127.0.0.1\";\n17         int hashCode = remoteIp.hashCode();\n18         int serverListSize = keyList.size();\n19         int serverPos = hashCode % serverListSize;\n20         \n21         return keyList.get(serverPos);\n22     }\n23 }\n```\n前两部分和轮询法、随机法一样就不说了，差别在于路由选择部分。通过客户端的ip也就是remoteIp，取得它的Hash值，对服务器列表的大小取模，结果便是选用的服务器在服务器列表中的索引值。\n源地址哈希法的优点在于：保证了相同客户端IP地址将会被哈希到同一台后端服务器，直到后端服务器列表变更。根据此特性可以在服务消费者与服务提供者之间建立有状态的session会话。\n源地址哈希算法的缺点在于：除非集群中服务器的非常稳定，基本不会上下线，否则一旦有服务器上线、下线，那么通过源地址哈希算法路由到的服务器是服务器上线、下线前路由到的服务器的概率非常低，如果是session则取不到session，如果是缓存则可能引发\"雪崩\"。如果这么解释不适合明白，可以看我之前的一篇文章MemCache超详细解读，一致性Hash算法部分。\n \n加权轮询（Weight Round Robin）法\n不同的服务器可能机器配置和当前系统的负载并不相同，因此它们的抗压能力也不尽相同，给配置高、负载低的机器配置更高的权重，让其处理更多的请求，而低配置、高负载的机器，则给其分配较低的权重，降低其系统负载。加权轮询法可以很好地处理这一问题，并将请求顺序按照权重分配到后端。加权轮询法的代码实现大致如下：\n```java\n 1 public class WeightRoundRobin\n 2 {\n 3     private static Integer pos;\n 4     \n 5     public static String getServer()\n 6     {\n 7         // 重建一个Map，避免服务器的上下线导致的并发问题\n 8         Map<String, Integer> serverMap = \n 9                 new HashMap<String, Integer>();\n10         serverMap.putAll(IpMap.serverWeightMap);\n11         \n12         // 取得Ip地址List\n13         Set<String> keySet = serverMap.keySet();\n14         Iterator<String> iterator = keySet.iterator();\n15         \n16         List<String> serverList = new ArrayList<String>();\n17         while (iterator.hasNext())\n18         {\n19             String server = iterator.next();\n20             int weight = serverMap.get(server);\n21             for (int i = 0; i < weight; i++)\n22                 serverList.add(server);\n23         }\n24         \n25         String server = null;\n26         synchronized (pos)\n27         {\n28             if (pos > keySet.size())\n29                 pos = 0;\n30             server = serverList.get(pos);\n31             pos ++;\n32         }\n33         \n34         return server;\n35     }\n36 }\n```\n与轮询法类似，只是在获取服务器地址之前增加了一段权重计算的代码，根据权重的大小，将地址重复地增加到服务器地址列表中，权重越大，该服务器每轮所获得的请求数量越多。\n \n加权随机（Weight Random）法\n与加权轮询法类似，加权随机法也是根据后端服务器不同的配置和负载情况来配置不同的权重。不同的是，它是按照权重来随机选择服务器的，而不是顺序。加权随机法的代码实现如下：\n ```java\n1 public class WeightRandom\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         Iterator<String> iterator = keySet.iterator();\n13         \n14         List<String> serverList = new ArrayList<String>();\n15         while (iterator.hasNext())\n16         {\n17             String server = iterator.next();\n18             int weight = serverMap.get(server);\n19             for (int i = 0; i < weight; i++)\n20                 serverList.add(server);\n21         }\n22         \n23         java.util.Random random = new java.util.Random();\n24         int randomPos = random.nextInt(serverList.size());\n25         \n26         return serverList.get(randomPos);\n27     }\n28 }\n ```\n这段代码相当于是随机法和加权轮询法的结合，比较好理解，就不解释了。\n \n最小连接数（Least Connections）法\n前面几种方法费尽心思来实现服务消费者请求次数分配的均衡，当然这么做是没错的，可以为后端的多台服务器平均分配工作量，最大程度地提高服务器的利用率，但是实际情况是否真的如此？实际情况中，请求次数的均衡真的能代表负载的均衡吗？这是一个值得思考的问题。\n上面的问题，再换一个角度来说就是：以后端服务器的视角来观察系统的负载，而非请求发起方来观察。最小连接数法便属于此类。\n最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能地提高后端服务器的利用效率，将负载合理地分流到每一台机器。由于最小连接数设计服务器连接数的汇总和感知，设计与实现较为繁琐，此处就不说它的实现了。\n","source":"_posts/cs/loadbalance.md","raw":"---\ntitle: loadbalance\ntags:\n  - 标签\ncategories:\n  - 分类\ndate: 2018-10-12 16:56:16\n---\n\n# 负载均衡\n当一台服务器的承受能力达到上限时，那么就需要多台服务器来组成集群，提升应用整体的吞吐量，那么这个时候就涉及到如何合理分配客户端请求到集群中不同的机器，这个过程就叫做负载均衡，当然这也是负载均衡要解决的问题。\n\n### 实现：\n模拟Ip列表：\n```java\n 1 public class IpMap\n 2 {\n 3     // 待路由的Ip列表，Key代表Ip，Value代表该Ip的权重\n 4     public static HashMap<String, Integer> serverWeightMap = \n 5             new HashMap<String, Integer>();\n 6     \n 7     static\n 8     {\n 9         serverWeightMap.put(\"192.168.1.100\", 1);\n10         serverWeightMap.put(\"192.168.1.101\", 1);\n11         // 权重为4\n12         serverWeightMap.put(\"192.168.1.102\", 4);\n13         serverWeightMap.put(\"192.168.1.103\", 1);\n14         serverWeightMap.put(\"192.168.1.104\", 1);\n15         // 权重为3\n16         serverWeightMap.put(\"192.168.1.105\", 3);\n17         serverWeightMap.put(\"192.168.1.106\", 1);\n18         // 权重为2\n19         serverWeightMap.put(\"192.168.1.107\", 2);\n20         serverWeightMap.put(\"192.168.1.108\", 1);\n21         serverWeightMap.put(\"192.168.1.109\", 1);\n22         serverWeightMap.put(\"192.168.1.110\", 1);\n23     }\n24 }\n```\n \n轮询（Round Robin）法\n轮询法即Round Robin法，其代码实现大致如下：\n```java\n 1 public class RoundRobin\n 2 {\n 3     private static Integer pos = 0;\n 4     \n 5     public static String getServer()\n 6     {\n 7         // 重建一个Map，避免服务器的上下线导致的并发问题\n 8         Map<String, Integer> serverMap = \n 9                 new HashMap<String, Integer>();\n10         serverMap.putAll(IpMap.serverWeightMap);\n11         \n12         // 取得Ip地址List\n13         Set<String> keySet = serverMap.keySet();\n14         ArrayList<String> keyList = new ArrayList<String>();\n15         keyList.addAll(keySet);\n16         \n17         String server = null;\n18         synchronized (pos)\n19         {\n20             if (pos >= keySet.size())\n21                 pos = 0;\n22             server = keyList.get(pos);\n23             pos ++;\n24         }\n25         \n26         return server;\n27     }\n28 }\n```\n由于serverWeightMap中的地址列表是动态的，随时可能有机器上线、下线或者宕机，因此为了避免可能出现的并发问题，方法内部要新建局部变量serverMap，现将serverMap中的内容复制到线程本地，以避免被多个线程修改。这样可能会引入新的问题，复制以后serverWeightMap的修改无法反映给serverMap，也就是说这一轮选择服务器的过程中，新增服务器或者下线服务器，负载均衡算法将无法获知。新增无所谓，如果有服务器下线或者宕机，那么可能会访问到不存在的地址。因此，服务调用端需要有相应的容错处理，比如重新发起一次server选择并调用。\n对于当前轮询的位置变量pos，为了保证服务器选择的顺序性，需要在操作时对其加锁，使得同一时刻只能有一个线程可以修改pos的值，否则当pos变量被并发修改，则无法保证服务器选择的顺序性，甚至有可能导致keyList数组越界。\n轮询法的优点在于：试图做到请求转移的绝对均衡。\n轮询法的缺点在于：为了做到请求转移的绝对均衡，必须付出相当大的代价，因为为了保证pos变量修改的互斥性，需要引入重量级的悲观锁synchronized，这将会导致该段轮询代码的并发吞吐量发生明显的下降。\n \n随机（Random）法\n通过系统随机函数，根据后端服务器列表的大小值来随机选择其中一台进行访问。由概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到每一台后端服务器，也就是轮询的效果。\n随机法的代码实现大致如下：\n```java\n 1 public class Random\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         ArrayList<String> keyList = new ArrayList<String>();\n13         keyList.addAll(keySet);\n14         \n15         java.util.Random random = new java.util.Random();\n16         int randomPos = random.nextInt(keyList.size());\n17         \n18         return keyList.get(randomPos);\n19     }\n20 }\n```\n整体代码思路和轮询法一致，先重建serverMap，再获取到server列表。在选取server的时候，通过Random的nextInt方法取0~keyList.size()区间的一个随机值，从而从服务器列表中随机获取到一台服务器地址进行返回。基于概率统计的理论，吞吐量越大，随机算法的效果越接近于轮询算法的效果。\n \n源地址哈希（Hash）法\n源地址哈希的思想是获取客户端访问的IP地址值，通过哈希函数计算得到一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是要访问的服务器的序号。源地址哈希算法的代码实现大致如下：\n```java\n 1 public class Hash\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         ArrayList<String> keyList = new ArrayList<String>();\n13         keyList.addAll(keySet);\n14         \n15         // 在Web应用中可通过HttpServlet的getRemoteIp方法获取\n16         String remoteIp = \"127.0.0.1\";\n17         int hashCode = remoteIp.hashCode();\n18         int serverListSize = keyList.size();\n19         int serverPos = hashCode % serverListSize;\n20         \n21         return keyList.get(serverPos);\n22     }\n23 }\n```\n前两部分和轮询法、随机法一样就不说了，差别在于路由选择部分。通过客户端的ip也就是remoteIp，取得它的Hash值，对服务器列表的大小取模，结果便是选用的服务器在服务器列表中的索引值。\n源地址哈希法的优点在于：保证了相同客户端IP地址将会被哈希到同一台后端服务器，直到后端服务器列表变更。根据此特性可以在服务消费者与服务提供者之间建立有状态的session会话。\n源地址哈希算法的缺点在于：除非集群中服务器的非常稳定，基本不会上下线，否则一旦有服务器上线、下线，那么通过源地址哈希算法路由到的服务器是服务器上线、下线前路由到的服务器的概率非常低，如果是session则取不到session，如果是缓存则可能引发\"雪崩\"。如果这么解释不适合明白，可以看我之前的一篇文章MemCache超详细解读，一致性Hash算法部分。\n \n加权轮询（Weight Round Robin）法\n不同的服务器可能机器配置和当前系统的负载并不相同，因此它们的抗压能力也不尽相同，给配置高、负载低的机器配置更高的权重，让其处理更多的请求，而低配置、高负载的机器，则给其分配较低的权重，降低其系统负载。加权轮询法可以很好地处理这一问题，并将请求顺序按照权重分配到后端。加权轮询法的代码实现大致如下：\n```java\n 1 public class WeightRoundRobin\n 2 {\n 3     private static Integer pos;\n 4     \n 5     public static String getServer()\n 6     {\n 7         // 重建一个Map，避免服务器的上下线导致的并发问题\n 8         Map<String, Integer> serverMap = \n 9                 new HashMap<String, Integer>();\n10         serverMap.putAll(IpMap.serverWeightMap);\n11         \n12         // 取得Ip地址List\n13         Set<String> keySet = serverMap.keySet();\n14         Iterator<String> iterator = keySet.iterator();\n15         \n16         List<String> serverList = new ArrayList<String>();\n17         while (iterator.hasNext())\n18         {\n19             String server = iterator.next();\n20             int weight = serverMap.get(server);\n21             for (int i = 0; i < weight; i++)\n22                 serverList.add(server);\n23         }\n24         \n25         String server = null;\n26         synchronized (pos)\n27         {\n28             if (pos > keySet.size())\n29                 pos = 0;\n30             server = serverList.get(pos);\n31             pos ++;\n32         }\n33         \n34         return server;\n35     }\n36 }\n```\n与轮询法类似，只是在获取服务器地址之前增加了一段权重计算的代码，根据权重的大小，将地址重复地增加到服务器地址列表中，权重越大，该服务器每轮所获得的请求数量越多。\n \n加权随机（Weight Random）法\n与加权轮询法类似，加权随机法也是根据后端服务器不同的配置和负载情况来配置不同的权重。不同的是，它是按照权重来随机选择服务器的，而不是顺序。加权随机法的代码实现如下：\n ```java\n1 public class WeightRandom\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         Iterator<String> iterator = keySet.iterator();\n13         \n14         List<String> serverList = new ArrayList<String>();\n15         while (iterator.hasNext())\n16         {\n17             String server = iterator.next();\n18             int weight = serverMap.get(server);\n19             for (int i = 0; i < weight; i++)\n20                 serverList.add(server);\n21         }\n22         \n23         java.util.Random random = new java.util.Random();\n24         int randomPos = random.nextInt(serverList.size());\n25         \n26         return serverList.get(randomPos);\n27     }\n28 }\n ```\n这段代码相当于是随机法和加权轮询法的结合，比较好理解，就不解释了。\n \n最小连接数（Least Connections）法\n前面几种方法费尽心思来实现服务消费者请求次数分配的均衡，当然这么做是没错的，可以为后端的多台服务器平均分配工作量，最大程度地提高服务器的利用率，但是实际情况是否真的如此？实际情况中，请求次数的均衡真的能代表负载的均衡吗？这是一个值得思考的问题。\n上面的问题，再换一个角度来说就是：以后端服务器的视角来观察系统的负载，而非请求发起方来观察。最小连接数法便属于此类。\n最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能地提高后端服务器的利用效率，将负载合理地分流到每一台机器。由于最小连接数设计服务器连接数的汇总和感知，设计与实现较为繁琐，此处就不说它的实现了。\n","slug":"cs/loadbalance","published":1,"updated":"2018-11-06T05:07:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4hq0004lls6g5wio7mh","content":"<h1 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h1><p>当一台服务器的承受能力达到上限时，那么就需要多台服务器来组成集群，提升应用整体的吞吐量，那么这个时候就涉及到如何合理分配客户端请求到集群中不同的机器，这个过程就叫做负载均衡，当然这也是负载均衡要解决的问题。</p>\n<h3 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h3><p>模拟Ip列表：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IpMap</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"comment\">// 待路由的Ip列表，Key代表Ip，Value代表该Ip的权重</span></span><br><span class=\"line\"> <span class=\"number\">4</span>     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HashMap&lt;String, Integer&gt; serverWeightMap = </span><br><span class=\"line\"> <span class=\"number\">5</span>             <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">6</span>     </span><br><span class=\"line\"> <span class=\"number\">7</span>     <span class=\"keyword\">static</span></span><br><span class=\"line\"> <span class=\"number\">8</span>     &#123;</span><br><span class=\"line\"> <span class=\"number\">9</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.100\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">10</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.101\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">11</span>         <span class=\"comment\">// 权重为4</span></span><br><span class=\"line\"><span class=\"number\">12</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.102\"</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"number\">13</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.103\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">14</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.104\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"comment\">// 权重为3</span></span><br><span class=\"line\"><span class=\"number\">16</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.105\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"number\">17</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.106\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"comment\">// 权重为2</span></span><br><span class=\"line\"><span class=\"number\">19</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.107\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"number\">20</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.108\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">21</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.109\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">22</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.110\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">23</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">24</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>轮询（Round Robin）法<br>轮询法即Round Robin法，其代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoundRobin</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"number\">4</span>     </span><br><span class=\"line\"> <span class=\"number\">5</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 6     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">8</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">9</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"><span class=\"number\">10</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"><span class=\"number\">11</span>         </span><br><span class=\"line\"><span class=\"number\">12</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">13</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">14</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">15</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">16</span>         </span><br><span class=\"line\"><span class=\"number\">17</span>         String server = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">synchronized</span> (pos)</span><br><span class=\"line\"><span class=\"number\">19</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">20</span>             <span class=\"keyword\">if</span> (pos &gt;= keySet.size())</span><br><span class=\"line\"><span class=\"number\">21</span>                 pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">22</span>             server = keyList.get(pos);</span><br><span class=\"line\"><span class=\"number\">23</span>             pos ++;</span><br><span class=\"line\"><span class=\"number\">24</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">25</span>         </span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">return</span> server;</span><br><span class=\"line\"><span class=\"number\">27</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">28</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于serverWeightMap中的地址列表是动态的，随时可能有机器上线、下线或者宕机，因此为了避免可能出现的并发问题，方法内部要新建局部变量serverMap，现将serverMap中的内容复制到线程本地，以避免被多个线程修改。这样可能会引入新的问题，复制以后serverWeightMap的修改无法反映给serverMap，也就是说这一轮选择服务器的过程中，新增服务器或者下线服务器，负载均衡算法将无法获知。新增无所谓，如果有服务器下线或者宕机，那么可能会访问到不存在的地址。因此，服务调用端需要有相应的容错处理，比如重新发起一次server选择并调用。<br>对于当前轮询的位置变量pos，为了保证服务器选择的顺序性，需要在操作时对其加锁，使得同一时刻只能有一个线程可以修改pos的值，否则当pos变量被并发修改，则无法保证服务器选择的顺序性，甚至有可能导致keyList数组越界。<br>轮询法的优点在于：试图做到请求转移的绝对均衡。<br>轮询法的缺点在于：为了做到请求转移的绝对均衡，必须付出相当大的代价，因为为了保证pos变量修改的互斥性，需要引入重量级的悲观锁synchronized，这将会导致该段轮询代码的并发吞吐量发生明显的下降。</p>\n<p>随机（Random）法<br>通过系统随机函数，根据后端服务器列表的大小值来随机选择其中一台进行访问。由概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到每一台后端服务器，也就是轮询的效果。<br>随机法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Random</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">13</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">14</span>         </span><br><span class=\"line\"><span class=\"number\">15</span>         java.util.Random random = <span class=\"keyword\">new</span> java.util.Random();</span><br><span class=\"line\"><span class=\"number\">16</span>         <span class=\"keyword\">int</span> randomPos = random.nextInt(keyList.size());</span><br><span class=\"line\"><span class=\"number\">17</span>         </span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">return</span> keyList.get(randomPos);</span><br><span class=\"line\"><span class=\"number\">19</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">20</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>整体代码思路和轮询法一致，先重建serverMap，再获取到server列表。在选取server的时候，通过Random的nextInt方法取0~keyList.size()区间的一个随机值，从而从服务器列表中随机获取到一台服务器地址进行返回。基于概率统计的理论，吞吐量越大，随机算法的效果越接近于轮询算法的效果。</p>\n<p>源地址哈希（Hash）法<br>源地址哈希的思想是获取客户端访问的IP地址值，通过哈希函数计算得到一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是要访问的服务器的序号。源地址哈希算法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hash</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">13</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">14</span>         </span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"comment\">// 在Web应用中可通过HttpServlet的getRemoteIp方法获取</span></span><br><span class=\"line\"><span class=\"number\">16</span>         String remoteIp = <span class=\"string\">\"127.0.0.1\"</span>;</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"keyword\">int</span> hashCode = remoteIp.hashCode();</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">int</span> serverListSize = keyList.size();</span><br><span class=\"line\"><span class=\"number\">19</span>         <span class=\"keyword\">int</span> serverPos = hashCode % serverListSize;</span><br><span class=\"line\"><span class=\"number\">20</span>         </span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"keyword\">return</span> keyList.get(serverPos);</span><br><span class=\"line\"><span class=\"number\">22</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">23</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>前两部分和轮询法、随机法一样就不说了，差别在于路由选择部分。通过客户端的ip也就是remoteIp，取得它的Hash值，对服务器列表的大小取模，结果便是选用的服务器在服务器列表中的索引值。<br>源地址哈希法的优点在于：保证了相同客户端IP地址将会被哈希到同一台后端服务器，直到后端服务器列表变更。根据此特性可以在服务消费者与服务提供者之间建立有状态的session会话。<br>源地址哈希算法的缺点在于：除非集群中服务器的非常稳定，基本不会上下线，否则一旦有服务器上线、下线，那么通过源地址哈希算法路由到的服务器是服务器上线、下线前路由到的服务器的概率非常低，如果是session则取不到session，如果是缓存则可能引发”雪崩”。如果这么解释不适合明白，可以看我之前的一篇文章MemCache超详细解读，一致性Hash算法部分。</p>\n<p>加权轮询（Weight Round Robin）法<br>不同的服务器可能机器配置和当前系统的负载并不相同，因此它们的抗压能力也不尽相同，给配置高、负载低的机器配置更高的权重，让其处理更多的请求，而低配置、高负载的机器，则给其分配较低的权重，降低其系统负载。加权轮询法可以很好地处理这一问题，并将请求顺序按照权重分配到后端。加权轮询法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeightRoundRobin</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer pos;</span><br><span class=\"line\"> <span class=\"number\">4</span>     </span><br><span class=\"line\"> <span class=\"number\">5</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 6     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">8</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">9</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"><span class=\"number\">10</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"><span class=\"number\">11</span>         </span><br><span class=\"line\"><span class=\"number\">12</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">13</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">14</span>         Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class=\"line\"><span class=\"number\">15</span>         </span><br><span class=\"line\"><span class=\"number\">16</span>         List&lt;String&gt; serverList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"keyword\">while</span> (iterator.hasNext())</span><br><span class=\"line\"><span class=\"number\">18</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">19</span>             String server = iterator.next();</span><br><span class=\"line\"><span class=\"number\">20</span>             <span class=\"keyword\">int</span> weight = serverMap.get(server);</span><br><span class=\"line\"><span class=\"number\">21</span>             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; weight; i++)</span><br><span class=\"line\"><span class=\"number\">22</span>                 serverList.add(server);</span><br><span class=\"line\"><span class=\"number\">23</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">24</span>         </span><br><span class=\"line\"><span class=\"number\">25</span>         String server = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">synchronized</span> (pos)</span><br><span class=\"line\"><span class=\"number\">27</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">28</span>             <span class=\"keyword\">if</span> (pos &gt; keySet.size())</span><br><span class=\"line\"><span class=\"number\">29</span>                 pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">30</span>             server = serverList.get(pos);</span><br><span class=\"line\"><span class=\"number\">31</span>             pos ++;</span><br><span class=\"line\"><span class=\"number\">32</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">33</span>         </span><br><span class=\"line\"><span class=\"number\">34</span>         <span class=\"keyword\">return</span> server;</span><br><span class=\"line\"><span class=\"number\">35</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">36</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>与轮询法类似，只是在获取服务器地址之前增加了一段权重计算的代码，根据权重的大小，将地址重复地增加到服务器地址列表中，权重越大，该服务器每轮所获得的请求数量越多。</p>\n<p>加权随机（Weight Random）法<br>与加权轮询法类似，加权随机法也是根据后端服务器不同的配置和负载情况来配置不同的权重。不同的是，它是按照权重来随机选择服务器的，而不是顺序。加权随机法的代码实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeightRandom</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class=\"line\"><span class=\"number\">13</span>         </span><br><span class=\"line\"><span class=\"number\">14</span>         List&lt;String&gt; serverList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"keyword\">while</span> (iterator.hasNext())</span><br><span class=\"line\"><span class=\"number\">16</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">17</span>             String server = iterator.next();</span><br><span class=\"line\"><span class=\"number\">18</span>             <span class=\"keyword\">int</span> weight = serverMap.get(server);</span><br><span class=\"line\"><span class=\"number\">19</span>             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; weight; i++)</span><br><span class=\"line\"><span class=\"number\">20</span>                 serverList.add(server);</span><br><span class=\"line\"><span class=\"number\">21</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">22</span>         </span><br><span class=\"line\"><span class=\"number\">23</span>         java.util.Random random = <span class=\"keyword\">new</span> java.util.Random();</span><br><span class=\"line\"><span class=\"number\">24</span>         <span class=\"keyword\">int</span> randomPos = random.nextInt(serverList.size());</span><br><span class=\"line\"><span class=\"number\">25</span>         </span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">return</span> serverList.get(randomPos);</span><br><span class=\"line\"><span class=\"number\">27</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">28</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码相当于是随机法和加权轮询法的结合，比较好理解，就不解释了。</p>\n<p>最小连接数（Least Connections）法<br>前面几种方法费尽心思来实现服务消费者请求次数分配的均衡，当然这么做是没错的，可以为后端的多台服务器平均分配工作量，最大程度地提高服务器的利用率，但是实际情况是否真的如此？实际情况中，请求次数的均衡真的能代表负载的均衡吗？这是一个值得思考的问题。<br>上面的问题，再换一个角度来说就是：以后端服务器的视角来观察系统的负载，而非请求发起方来观察。最小连接数法便属于此类。<br>最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能地提高后端服务器的利用效率，将负载合理地分流到每一台机器。由于最小连接数设计服务器连接数的汇总和感知，设计与实现较为繁琐，此处就不说它的实现了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h1><p>当一台服务器的承受能力达到上限时，那么就需要多台服务器来组成集群，提升应用整体的吞吐量，那么这个时候就涉及到如何合理分配客户端请求到集群中不同的机器，这个过程就叫做负载均衡，当然这也是负载均衡要解决的问题。</p>\n<h3 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h3><p>模拟Ip列表：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IpMap</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"comment\">// 待路由的Ip列表，Key代表Ip，Value代表该Ip的权重</span></span><br><span class=\"line\"> <span class=\"number\">4</span>     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HashMap&lt;String, Integer&gt; serverWeightMap = </span><br><span class=\"line\"> <span class=\"number\">5</span>             <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">6</span>     </span><br><span class=\"line\"> <span class=\"number\">7</span>     <span class=\"keyword\">static</span></span><br><span class=\"line\"> <span class=\"number\">8</span>     &#123;</span><br><span class=\"line\"> <span class=\"number\">9</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.100\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">10</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.101\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">11</span>         <span class=\"comment\">// 权重为4</span></span><br><span class=\"line\"><span class=\"number\">12</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.102\"</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"number\">13</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.103\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">14</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.104\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"comment\">// 权重为3</span></span><br><span class=\"line\"><span class=\"number\">16</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.105\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"number\">17</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.106\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"comment\">// 权重为2</span></span><br><span class=\"line\"><span class=\"number\">19</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.107\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"number\">20</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.108\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">21</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.109\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">22</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.110\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">23</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">24</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>轮询（Round Robin）法<br>轮询法即Round Robin法，其代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoundRobin</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"number\">4</span>     </span><br><span class=\"line\"> <span class=\"number\">5</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 6     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">8</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">9</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"><span class=\"number\">10</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"><span class=\"number\">11</span>         </span><br><span class=\"line\"><span class=\"number\">12</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">13</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">14</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">15</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">16</span>         </span><br><span class=\"line\"><span class=\"number\">17</span>         String server = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">synchronized</span> (pos)</span><br><span class=\"line\"><span class=\"number\">19</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">20</span>             <span class=\"keyword\">if</span> (pos &gt;= keySet.size())</span><br><span class=\"line\"><span class=\"number\">21</span>                 pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">22</span>             server = keyList.get(pos);</span><br><span class=\"line\"><span class=\"number\">23</span>             pos ++;</span><br><span class=\"line\"><span class=\"number\">24</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">25</span>         </span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">return</span> server;</span><br><span class=\"line\"><span class=\"number\">27</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">28</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于serverWeightMap中的地址列表是动态的，随时可能有机器上线、下线或者宕机，因此为了避免可能出现的并发问题，方法内部要新建局部变量serverMap，现将serverMap中的内容复制到线程本地，以避免被多个线程修改。这样可能会引入新的问题，复制以后serverWeightMap的修改无法反映给serverMap，也就是说这一轮选择服务器的过程中，新增服务器或者下线服务器，负载均衡算法将无法获知。新增无所谓，如果有服务器下线或者宕机，那么可能会访问到不存在的地址。因此，服务调用端需要有相应的容错处理，比如重新发起一次server选择并调用。<br>对于当前轮询的位置变量pos，为了保证服务器选择的顺序性，需要在操作时对其加锁，使得同一时刻只能有一个线程可以修改pos的值，否则当pos变量被并发修改，则无法保证服务器选择的顺序性，甚至有可能导致keyList数组越界。<br>轮询法的优点在于：试图做到请求转移的绝对均衡。<br>轮询法的缺点在于：为了做到请求转移的绝对均衡，必须付出相当大的代价，因为为了保证pos变量修改的互斥性，需要引入重量级的悲观锁synchronized，这将会导致该段轮询代码的并发吞吐量发生明显的下降。</p>\n<p>随机（Random）法<br>通过系统随机函数，根据后端服务器列表的大小值来随机选择其中一台进行访问。由概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到每一台后端服务器，也就是轮询的效果。<br>随机法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Random</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">13</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">14</span>         </span><br><span class=\"line\"><span class=\"number\">15</span>         java.util.Random random = <span class=\"keyword\">new</span> java.util.Random();</span><br><span class=\"line\"><span class=\"number\">16</span>         <span class=\"keyword\">int</span> randomPos = random.nextInt(keyList.size());</span><br><span class=\"line\"><span class=\"number\">17</span>         </span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">return</span> keyList.get(randomPos);</span><br><span class=\"line\"><span class=\"number\">19</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">20</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>整体代码思路和轮询法一致，先重建serverMap，再获取到server列表。在选取server的时候，通过Random的nextInt方法取0~keyList.size()区间的一个随机值，从而从服务器列表中随机获取到一台服务器地址进行返回。基于概率统计的理论，吞吐量越大，随机算法的效果越接近于轮询算法的效果。</p>\n<p>源地址哈希（Hash）法<br>源地址哈希的思想是获取客户端访问的IP地址值，通过哈希函数计算得到一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是要访问的服务器的序号。源地址哈希算法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hash</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">13</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">14</span>         </span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"comment\">// 在Web应用中可通过HttpServlet的getRemoteIp方法获取</span></span><br><span class=\"line\"><span class=\"number\">16</span>         String remoteIp = <span class=\"string\">\"127.0.0.1\"</span>;</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"keyword\">int</span> hashCode = remoteIp.hashCode();</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">int</span> serverListSize = keyList.size();</span><br><span class=\"line\"><span class=\"number\">19</span>         <span class=\"keyword\">int</span> serverPos = hashCode % serverListSize;</span><br><span class=\"line\"><span class=\"number\">20</span>         </span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"keyword\">return</span> keyList.get(serverPos);</span><br><span class=\"line\"><span class=\"number\">22</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">23</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>前两部分和轮询法、随机法一样就不说了，差别在于路由选择部分。通过客户端的ip也就是remoteIp，取得它的Hash值，对服务器列表的大小取模，结果便是选用的服务器在服务器列表中的索引值。<br>源地址哈希法的优点在于：保证了相同客户端IP地址将会被哈希到同一台后端服务器，直到后端服务器列表变更。根据此特性可以在服务消费者与服务提供者之间建立有状态的session会话。<br>源地址哈希算法的缺点在于：除非集群中服务器的非常稳定，基本不会上下线，否则一旦有服务器上线、下线，那么通过源地址哈希算法路由到的服务器是服务器上线、下线前路由到的服务器的概率非常低，如果是session则取不到session，如果是缓存则可能引发”雪崩”。如果这么解释不适合明白，可以看我之前的一篇文章MemCache超详细解读，一致性Hash算法部分。</p>\n<p>加权轮询（Weight Round Robin）法<br>不同的服务器可能机器配置和当前系统的负载并不相同，因此它们的抗压能力也不尽相同，给配置高、负载低的机器配置更高的权重，让其处理更多的请求，而低配置、高负载的机器，则给其分配较低的权重，降低其系统负载。加权轮询法可以很好地处理这一问题，并将请求顺序按照权重分配到后端。加权轮询法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeightRoundRobin</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer pos;</span><br><span class=\"line\"> <span class=\"number\">4</span>     </span><br><span class=\"line\"> <span class=\"number\">5</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 6     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">8</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">9</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"><span class=\"number\">10</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"><span class=\"number\">11</span>         </span><br><span class=\"line\"><span class=\"number\">12</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">13</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">14</span>         Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class=\"line\"><span class=\"number\">15</span>         </span><br><span class=\"line\"><span class=\"number\">16</span>         List&lt;String&gt; serverList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"keyword\">while</span> (iterator.hasNext())</span><br><span class=\"line\"><span class=\"number\">18</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">19</span>             String server = iterator.next();</span><br><span class=\"line\"><span class=\"number\">20</span>             <span class=\"keyword\">int</span> weight = serverMap.get(server);</span><br><span class=\"line\"><span class=\"number\">21</span>             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; weight; i++)</span><br><span class=\"line\"><span class=\"number\">22</span>                 serverList.add(server);</span><br><span class=\"line\"><span class=\"number\">23</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">24</span>         </span><br><span class=\"line\"><span class=\"number\">25</span>         String server = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">synchronized</span> (pos)</span><br><span class=\"line\"><span class=\"number\">27</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">28</span>             <span class=\"keyword\">if</span> (pos &gt; keySet.size())</span><br><span class=\"line\"><span class=\"number\">29</span>                 pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">30</span>             server = serverList.get(pos);</span><br><span class=\"line\"><span class=\"number\">31</span>             pos ++;</span><br><span class=\"line\"><span class=\"number\">32</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">33</span>         </span><br><span class=\"line\"><span class=\"number\">34</span>         <span class=\"keyword\">return</span> server;</span><br><span class=\"line\"><span class=\"number\">35</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">36</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>与轮询法类似，只是在获取服务器地址之前增加了一段权重计算的代码，根据权重的大小，将地址重复地增加到服务器地址列表中，权重越大，该服务器每轮所获得的请求数量越多。</p>\n<p>加权随机（Weight Random）法<br>与加权轮询法类似，加权随机法也是根据后端服务器不同的配置和负载情况来配置不同的权重。不同的是，它是按照权重来随机选择服务器的，而不是顺序。加权随机法的代码实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeightRandom</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class=\"line\"><span class=\"number\">13</span>         </span><br><span class=\"line\"><span class=\"number\">14</span>         List&lt;String&gt; serverList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"keyword\">while</span> (iterator.hasNext())</span><br><span class=\"line\"><span class=\"number\">16</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">17</span>             String server = iterator.next();</span><br><span class=\"line\"><span class=\"number\">18</span>             <span class=\"keyword\">int</span> weight = serverMap.get(server);</span><br><span class=\"line\"><span class=\"number\">19</span>             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; weight; i++)</span><br><span class=\"line\"><span class=\"number\">20</span>                 serverList.add(server);</span><br><span class=\"line\"><span class=\"number\">21</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">22</span>         </span><br><span class=\"line\"><span class=\"number\">23</span>         java.util.Random random = <span class=\"keyword\">new</span> java.util.Random();</span><br><span class=\"line\"><span class=\"number\">24</span>         <span class=\"keyword\">int</span> randomPos = random.nextInt(serverList.size());</span><br><span class=\"line\"><span class=\"number\">25</span>         </span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">return</span> serverList.get(randomPos);</span><br><span class=\"line\"><span class=\"number\">27</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">28</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码相当于是随机法和加权轮询法的结合，比较好理解，就不解释了。</p>\n<p>最小连接数（Least Connections）法<br>前面几种方法费尽心思来实现服务消费者请求次数分配的均衡，当然这么做是没错的，可以为后端的多台服务器平均分配工作量，最大程度地提高服务器的利用率，但是实际情况是否真的如此？实际情况中，请求次数的均衡真的能代表负载的均衡吗？这是一个值得思考的问题。<br>上面的问题，再换一个角度来说就是：以后端服务器的视角来观察系统的负载，而非请求发起方来观察。最小连接数法便属于此类。<br>最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能地提高后端服务器的利用效率，将负载合理地分流到每一台机器。由于最小连接数设计服务器连接数的汇总和感知，设计与实现较为繁琐，此处就不说它的实现了。</p>\n"},{"title":"linux 服务器常用命令整理","date":"2018-07-21T13:24:15.000Z","_content":"\n# linux 服务器常用命令整理\n\n### 目录\n\n- **网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload**\n- **网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc**\n- **抓包工具 - charles**\n- **内存检查 - free \\ meminfo**\n- **系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat**\n- **系统调用追踪 - strace \\ gcore**\n- **文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate**\n- **开发效率 - tmux**\n\n### 常见命令\n\n#### tcpdump\n\n1. tcp:用来过滤数据报的类型\n2. -i eth1 : 只抓经过接口eth1的包\n3. -t : 不显示时间戳\n4. -s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包\n5. -c 100 : 只抓取100个数据包\n6. dst port !22: 不抓取目标端口是22数据包\n7. src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24\n8. -A：显示数据包内容 \n\n示例：\n\n`tcpdump -i any -v port 8888`\n\n`tcpdump -i any -A port 8888  `\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg)\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg)\n\n\n\n#### netstat\n\n查看所有连接\n\n`netstat -autnp`\n\n查看监听的tcp服务\n\n`netstat -altnp`  \n\n看tcp端口\n\n`netstat -ltnp`\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg)\n\n\n\n#### ss\n\n- `ss -pl`   查看每个进程及其监听的端口\n- `ss -t -a`  查看所有的tcp连接\n- `ss -u -a`  查看所有的udp连接\n\n#### lsof\n\n- `lsof -i :8888`  查看端口8888进程信息\n- `lsof -p 7915` 查看进程7915打开的fd信息\n\n#### scp\n\n- `scp -r src remote:/tmp`  本地拷贝到远端\n- `scp -r remote:/tmp/src .`  远端拷贝到本地\n- `scp -3  remote:/tmp/a.tar   remote2:/tmp/`  以本地为跳板机，将remote机器上文件拷贝到remote2\n\n#### rsync\n\n- `rsync -av /home/mail/ 192.168.11.12:/home/mail/`\n- `rsync -av 192.168.11.11:/home/mail/ /home/mail/`\n\n#### nc\n\n- `nc -l 8888`   本地启动8888端口\n- `nc -l 8888 > a.tgz`   接收文件\n- `nc ali-.bj:8888   < a.tgz` 发送文件到远端\n\n#### vmstat\n\n- `vmstat 1 10`对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。\n- 对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。\n\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg)\n\n\n\n#### iostat\n\n- `iostat -x` 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg)\n\n\n\n#### top\n\n- 1  按CPU核数查看\n- P\n- M\n- c 查看完整进程命令\n- top -Hp pid  查看线程数\n\n#### ps\n\n- `ps -eo “pid,cmd,lstart”  | grep pid`   查看进程启动时间\n- `ps -ef f`  查看最近进程（常用）\n\n#### find\n\n- `find . -type f -mtime +3`   修改时间大于3天的文件\n- `find . -type f -mtime +3 | xargs rm -rf`  查找并删除\n\n#### du\n\n- `du -sk * | sort -n | cut -f2 | xargs -d '\\n' du -sh` 按文件大小排序显示\n- `du -hs` 常用\n\n#### awk\n\n`grep 'update_profile.*Android' access-20180131.log |awk -F 'POST' '{print $2}'|awk -F '&' '{print $26}'|awk -F ' ' '{print $1}'|awk -F '=' '{print $2}'|sort -n|uniq -c|sort -nr|head -100`\n\n-F 以空格分割","source":"_posts/cs_base/linux.md","raw":"---\ntitle: linux 服务器常用命令整理\ndate: 2018-07-21 21:24:15\ncategories: \n- linux\ntags: \n- linux\n- cmd\n---\n\n# linux 服务器常用命令整理\n\n### 目录\n\n- **网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload**\n- **网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc**\n- **抓包工具 - charles**\n- **内存检查 - free \\ meminfo**\n- **系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat**\n- **系统调用追踪 - strace \\ gcore**\n- **文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate**\n- **开发效率 - tmux**\n\n### 常见命令\n\n#### tcpdump\n\n1. tcp:用来过滤数据报的类型\n2. -i eth1 : 只抓经过接口eth1的包\n3. -t : 不显示时间戳\n4. -s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包\n5. -c 100 : 只抓取100个数据包\n6. dst port !22: 不抓取目标端口是22数据包\n7. src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24\n8. -A：显示数据包内容 \n\n示例：\n\n`tcpdump -i any -v port 8888`\n\n`tcpdump -i any -A port 8888  `\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg)\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg)\n\n\n\n#### netstat\n\n查看所有连接\n\n`netstat -autnp`\n\n查看监听的tcp服务\n\n`netstat -altnp`  \n\n看tcp端口\n\n`netstat -ltnp`\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg)\n\n\n\n#### ss\n\n- `ss -pl`   查看每个进程及其监听的端口\n- `ss -t -a`  查看所有的tcp连接\n- `ss -u -a`  查看所有的udp连接\n\n#### lsof\n\n- `lsof -i :8888`  查看端口8888进程信息\n- `lsof -p 7915` 查看进程7915打开的fd信息\n\n#### scp\n\n- `scp -r src remote:/tmp`  本地拷贝到远端\n- `scp -r remote:/tmp/src .`  远端拷贝到本地\n- `scp -3  remote:/tmp/a.tar   remote2:/tmp/`  以本地为跳板机，将remote机器上文件拷贝到remote2\n\n#### rsync\n\n- `rsync -av /home/mail/ 192.168.11.12:/home/mail/`\n- `rsync -av 192.168.11.11:/home/mail/ /home/mail/`\n\n#### nc\n\n- `nc -l 8888`   本地启动8888端口\n- `nc -l 8888 > a.tgz`   接收文件\n- `nc ali-.bj:8888   < a.tgz` 发送文件到远端\n\n#### vmstat\n\n- `vmstat 1 10`对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。\n- 对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。\n\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg)\n\n\n\n#### iostat\n\n- `iostat -x` 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg)\n\n\n\n#### top\n\n- 1  按CPU核数查看\n- P\n- M\n- c 查看完整进程命令\n- top -Hp pid  查看线程数\n\n#### ps\n\n- `ps -eo “pid,cmd,lstart”  | grep pid`   查看进程启动时间\n- `ps -ef f`  查看最近进程（常用）\n\n#### find\n\n- `find . -type f -mtime +3`   修改时间大于3天的文件\n- `find . -type f -mtime +3 | xargs rm -rf`  查找并删除\n\n#### du\n\n- `du -sk * | sort -n | cut -f2 | xargs -d '\\n' du -sh` 按文件大小排序显示\n- `du -hs` 常用\n\n#### awk\n\n`grep 'update_profile.*Android' access-20180131.log |awk -F 'POST' '{print $2}'|awk -F '&' '{print $26}'|awk -F ' ' '{print $1}'|awk -F '=' '{print $2}'|sort -n|uniq -c|sort -nr|head -100`\n\n-F 以空格分割","slug":"cs_base/linux","published":1,"updated":"2018-11-06T06:50:14.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4hy0007lls6mknsj9ws","content":"<h1 id=\"linux-服务器常用命令整理\"><a href=\"#linux-服务器常用命令整理\" class=\"headerlink\" title=\"linux 服务器常用命令整理\"></a>linux 服务器常用命令整理</h1><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><strong>网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload</strong></li>\n<li><strong>网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc</strong></li>\n<li><strong>抓包工具 - charles</strong></li>\n<li><strong>内存检查 - free \\ meminfo</strong></li>\n<li><strong>系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat</strong></li>\n<li><strong>系统调用追踪 - strace \\ gcore</strong></li>\n<li><strong>文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate</strong></li>\n<li><strong>开发效率 - tmux</strong></li>\n</ul>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><h4 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h4><ol>\n<li>tcp:用来过滤数据报的类型</li>\n<li>-i eth1 : 只抓经过接口eth1的包</li>\n<li>-t : 不显示时间戳</li>\n<li>-s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包</li>\n<li>-c 100 : 只抓取100个数据包</li>\n<li>dst port !22: 不抓取目标端口是22数据包</li>\n<li>src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24</li>\n<li>-A：显示数据包内容 </li>\n</ol>\n<p>示例：</p>\n<p><code>tcpdump -i any -v port 8888</code></p>\n<p><code>tcpdump -i any -A port 8888</code></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg\" alt=\"\"></p>\n<h4 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h4><p>查看所有连接</p>\n<p><code>netstat -autnp</code></p>\n<p>查看监听的tcp服务</p>\n<p><code>netstat -altnp</code>  </p>\n<p>看tcp端口</p>\n<p><code>netstat -ltnp</code></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg\" alt=\"\"></p>\n<h4 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h4><ul>\n<li><code>ss -pl</code>   查看每个进程及其监听的端口</li>\n<li><code>ss -t -a</code>  查看所有的tcp连接</li>\n<li><code>ss -u -a</code>  查看所有的udp连接</li>\n</ul>\n<h4 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h4><ul>\n<li><code>lsof -i :8888</code>  查看端口8888进程信息</li>\n<li><code>lsof -p 7915</code> 查看进程7915打开的fd信息</li>\n</ul>\n<h4 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h4><ul>\n<li><code>scp -r src remote:/tmp</code>  本地拷贝到远端</li>\n<li><code>scp -r remote:/tmp/src .</code>  远端拷贝到本地</li>\n<li><code>scp -3  remote:/tmp/a.tar   remote2:/tmp/</code>  以本地为跳板机，将remote机器上文件拷贝到remote2</li>\n</ul>\n<h4 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h4><ul>\n<li><code>rsync -av /home/mail/ 192.168.11.12:/home/mail/</code></li>\n<li><code>rsync -av 192.168.11.11:/home/mail/ /home/mail/</code></li>\n</ul>\n<h4 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h4><ul>\n<li><code>nc -l 8888</code>   本地启动8888端口</li>\n<li><code>nc -l 8888 &gt; a.tgz</code>   接收文件</li>\n<li><code>nc ali-.bj:8888   &lt; a.tgz</code> 发送文件到远端</li>\n</ul>\n<h4 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h4><ul>\n<li><code>vmstat 1 10</code>对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。</li>\n<li>对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg\" alt=\"\"></p>\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><ul>\n<li><code>iostat -x</code> 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的</li>\n</ul>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg\" alt=\"\"></p>\n<h4 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h4><ul>\n<li>1  按CPU核数查看</li>\n<li>P</li>\n<li>M</li>\n<li>c 查看完整进程命令</li>\n<li>top -Hp pid  查看线程数</li>\n</ul>\n<h4 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h4><ul>\n<li><code>ps -eo “pid,cmd,lstart”  | grep pid</code>   查看进程启动时间</li>\n<li><code>ps -ef f</code>  查看最近进程（常用）</li>\n</ul>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><ul>\n<li><code>find . -type f -mtime +3</code>   修改时间大于3天的文件</li>\n<li><code>find . -type f -mtime +3 | xargs rm -rf</code>  查找并删除</li>\n</ul>\n<h4 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h4><ul>\n<li><code>du -sk * | sort -n | cut -f2 | xargs -d &#39;\\n&#39; du -sh</code> 按文件大小排序显示</li>\n<li><code>du -hs</code> 常用</li>\n</ul>\n<h4 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h4><p><code>grep &#39;update_profile.*Android&#39; access-20180131.log |awk -F &#39;POST&#39; &#39;{print $2}&#39;|awk -F &#39;&amp;&#39; &#39;{print $26}&#39;|awk -F &#39; &#39; &#39;{print $1}&#39;|awk -F &#39;=&#39; &#39;{print $2}&#39;|sort -n|uniq -c|sort -nr|head -100</code></p>\n<p>-F 以空格分割</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux-服务器常用命令整理\"><a href=\"#linux-服务器常用命令整理\" class=\"headerlink\" title=\"linux 服务器常用命令整理\"></a>linux 服务器常用命令整理</h1><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><strong>网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload</strong></li>\n<li><strong>网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc</strong></li>\n<li><strong>抓包工具 - charles</strong></li>\n<li><strong>内存检查 - free \\ meminfo</strong></li>\n<li><strong>系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat</strong></li>\n<li><strong>系统调用追踪 - strace \\ gcore</strong></li>\n<li><strong>文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate</strong></li>\n<li><strong>开发效率 - tmux</strong></li>\n</ul>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><h4 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h4><ol>\n<li>tcp:用来过滤数据报的类型</li>\n<li>-i eth1 : 只抓经过接口eth1的包</li>\n<li>-t : 不显示时间戳</li>\n<li>-s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包</li>\n<li>-c 100 : 只抓取100个数据包</li>\n<li>dst port !22: 不抓取目标端口是22数据包</li>\n<li>src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24</li>\n<li>-A：显示数据包内容 </li>\n</ol>\n<p>示例：</p>\n<p><code>tcpdump -i any -v port 8888</code></p>\n<p><code>tcpdump -i any -A port 8888</code></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg\" alt=\"\"></p>\n<h4 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h4><p>查看所有连接</p>\n<p><code>netstat -autnp</code></p>\n<p>查看监听的tcp服务</p>\n<p><code>netstat -altnp</code>  </p>\n<p>看tcp端口</p>\n<p><code>netstat -ltnp</code></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg\" alt=\"\"></p>\n<h4 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h4><ul>\n<li><code>ss -pl</code>   查看每个进程及其监听的端口</li>\n<li><code>ss -t -a</code>  查看所有的tcp连接</li>\n<li><code>ss -u -a</code>  查看所有的udp连接</li>\n</ul>\n<h4 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h4><ul>\n<li><code>lsof -i :8888</code>  查看端口8888进程信息</li>\n<li><code>lsof -p 7915</code> 查看进程7915打开的fd信息</li>\n</ul>\n<h4 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h4><ul>\n<li><code>scp -r src remote:/tmp</code>  本地拷贝到远端</li>\n<li><code>scp -r remote:/tmp/src .</code>  远端拷贝到本地</li>\n<li><code>scp -3  remote:/tmp/a.tar   remote2:/tmp/</code>  以本地为跳板机，将remote机器上文件拷贝到remote2</li>\n</ul>\n<h4 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h4><ul>\n<li><code>rsync -av /home/mail/ 192.168.11.12:/home/mail/</code></li>\n<li><code>rsync -av 192.168.11.11:/home/mail/ /home/mail/</code></li>\n</ul>\n<h4 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h4><ul>\n<li><code>nc -l 8888</code>   本地启动8888端口</li>\n<li><code>nc -l 8888 &gt; a.tgz</code>   接收文件</li>\n<li><code>nc ali-.bj:8888   &lt; a.tgz</code> 发送文件到远端</li>\n</ul>\n<h4 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h4><ul>\n<li><code>vmstat 1 10</code>对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。</li>\n<li>对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg\" alt=\"\"></p>\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><ul>\n<li><code>iostat -x</code> 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的</li>\n</ul>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg\" alt=\"\"></p>\n<h4 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h4><ul>\n<li>1  按CPU核数查看</li>\n<li>P</li>\n<li>M</li>\n<li>c 查看完整进程命令</li>\n<li>top -Hp pid  查看线程数</li>\n</ul>\n<h4 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h4><ul>\n<li><code>ps -eo “pid,cmd,lstart”  | grep pid</code>   查看进程启动时间</li>\n<li><code>ps -ef f</code>  查看最近进程（常用）</li>\n</ul>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><ul>\n<li><code>find . -type f -mtime +3</code>   修改时间大于3天的文件</li>\n<li><code>find . -type f -mtime +3 | xargs rm -rf</code>  查找并删除</li>\n</ul>\n<h4 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h4><ul>\n<li><code>du -sk * | sort -n | cut -f2 | xargs -d &#39;\\n&#39; du -sh</code> 按文件大小排序显示</li>\n<li><code>du -hs</code> 常用</li>\n</ul>\n<h4 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h4><p><code>grep &#39;update_profile.*Android&#39; access-20180131.log |awk -F &#39;POST&#39; &#39;{print $2}&#39;|awk -F &#39;&amp;&#39; &#39;{print $26}&#39;|awk -F &#39; &#39; &#39;{print $1}&#39;|awk -F &#39;=&#39; &#39;{print $2}&#39;|sort -n|uniq -c|sort -nr|head -100</code></p>\n<p>-F 以空格分割</p>\n"},{"title":"0x 定一个目标","date":"2018-07-21T13:04:44.000Z","_content":"\n# 计划\n好好写博客，把思想沉淀下来\n\n## 短期计划\n\n- 每日一Page\n\n","source":"_posts/idea/定一个目标.md","raw":"---\ntitle: 0x 定一个目标\ndate: 2018-07-21 21:04:44\ncategories: \n- idea\ntags:\n- 计划\n- 目标\n---\n\n# 计划\n好好写博客，把思想沉淀下来\n\n## 短期计划\n\n- 每日一Page\n\n","slug":"idea/定一个目标","published":1,"updated":"2018-09-19T08:28:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4i10008lls62wp2xvm6","content":"<h1 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h1><p>好好写博客，把思想沉淀下来</p>\n<h2 id=\"短期计划\"><a href=\"#短期计划\" class=\"headerlink\" title=\"短期计划\"></a>短期计划</h2><ul>\n<li>每日一Page</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h1><p>好好写博客，把思想沉淀下来</p>\n<h2 id=\"短期计划\"><a href=\"#短期计划\" class=\"headerlink\" title=\"短期计划\"></a>短期计划</h2><ul>\n<li>每日一Page</li>\n</ul>\n"},{"title":"road map","date":"2018-10-09T09:06:58.000Z","_content":"![](https://ws1.sinaimg.cn/large/e5320b2aly1fw23187ukmj20uj0daacw.jpg)\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fw25gnhm6oj21102xa4qp.jpg)\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fw22zlkk69j20zo2s0nmr.jpg)\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fw25fywf2jj20up1pk7e5.jpg)","source":"_posts/stack/road-map.md","raw":"---\ntitle: road map\ntags:\n  - roadmap\ncategories:\n  - cs\ndate: 2018-10-09 17:06:58\n---\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fw23187ukmj20uj0daacw.jpg)\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fw25gnhm6oj21102xa4qp.jpg)\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fw22zlkk69j20zo2s0nmr.jpg)\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fw25fywf2jj20up1pk7e5.jpg)","slug":"stack/road-map","published":1,"updated":"2018-10-09T10:32:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4i30009lls632gas43n","content":"<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fw23187ukmj20uj0daacw.jpg\" alt=\"\"><br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fw25gnhm6oj21102xa4qp.jpg\" alt=\"\"><br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fw22zlkk69j20zo2s0nmr.jpg\" alt=\"\"><br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fw25fywf2jj20up1pk7e5.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fw23187ukmj20uj0daacw.jpg\" alt=\"\"><br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fw25gnhm6oj21102xa4qp.jpg\" alt=\"\"><br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fw22zlkk69j20zo2s0nmr.jpg\" alt=\"\"><br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fw25fywf2jj20up1pk7e5.jpg\" alt=\"\"></p>\n"},{"title":"todo","date":"2018-09-19T10:46:24.000Z","_content":"\n# 源码阅读计划\n\n- codis\n- tidb\n- consul\n\n","source":"_posts/todo/todo.md","raw":"---\ntitle: todo\ntags:\n  - todo\ncategories:\n  - todo\ndate: 2018-09-19 18:46:24\n---\n\n# 源码阅读计划\n\n- codis\n- tidb\n- consul\n\n","slug":"todo/todo","published":1,"updated":"2018-09-20T08:08:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4i6000clls612cs13ho","content":"<h1 id=\"源码阅读计划\"><a href=\"#源码阅读计划\" class=\"headerlink\" title=\"源码阅读计划\"></a>源码阅读计划</h1><ul>\n<li>codis</li>\n<li>tidb</li>\n<li>consul</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"源码阅读计划\"><a href=\"#源码阅读计划\" class=\"headerlink\" title=\"源码阅读计划\"></a>源码阅读计划</h1><ul>\n<li>codis</li>\n<li>tidb</li>\n<li>consul</li>\n</ul>\n"},{"title":"git cheatcheet","date":"2018-09-19T08:12:32.000Z","_content":"\n# 简图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fwy5q46d3lj215k10nabc.jpg)\n\n\n# 常用命令\n~~~\ngit add . //ga\ngit status //gs\ngit diff //gd\ngit commit -m \"desc\" //gcm\ngit push //gp\ngit checkout -b feature_1 //gcb\ngit pull origin master //gpom\n~~~\n\n## 偶尔用到\n~~~\ngit push --set-upstream origin dev_2 \ngit stash\ngit log\ngit cherry-pick xxx\ngit init\ngit clone\n~~~\n\n### 很少用到\n~~~\ngit config --global user.name \"muName\"\ngit config --global user.email \"myEmail\"\n~~~\n\n### GET NEW THING\n\n#### 比对 diff\n\n```\ngit diff 比对当前内容和暂存区内容。\ngit diff HEAD 比对当前内容和最近一次提交。\ngit diff HEAD^ 比对当前内容和倒数第二次提交。\ngit diff HEAD^ HEAD 比对最近两次提交。\n```\n","source":"_posts/tool/git-cheatcheet.md","raw":"---\ntitle: git cheatcheet\ntags:\n  - git\ncategories:\n  - tool\ndate: 2018-09-19 16:12:32\n---\n\n# 简图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fwy5q46d3lj215k10nabc.jpg)\n\n\n# 常用命令\n~~~\ngit add . //ga\ngit status //gs\ngit diff //gd\ngit commit -m \"desc\" //gcm\ngit push //gp\ngit checkout -b feature_1 //gcb\ngit pull origin master //gpom\n~~~\n\n## 偶尔用到\n~~~\ngit push --set-upstream origin dev_2 \ngit stash\ngit log\ngit cherry-pick xxx\ngit init\ngit clone\n~~~\n\n### 很少用到\n~~~\ngit config --global user.name \"muName\"\ngit config --global user.email \"myEmail\"\n~~~\n\n### GET NEW THING\n\n#### 比对 diff\n\n```\ngit diff 比对当前内容和暂存区内容。\ngit diff HEAD 比对当前内容和最近一次提交。\ngit diff HEAD^ 比对当前内容和倒数第二次提交。\ngit diff HEAD^ HEAD 比对最近两次提交。\n```\n","slug":"tool/git-cheatcheet","published":1,"updated":"2018-11-06T03:02:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4i7000dlls6uckqgas1","content":"<h1 id=\"简图\"><a href=\"#简图\" class=\"headerlink\" title=\"简图\"></a>简图</h1><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fwy5q46d3lj215k10nabc.jpg\" alt=\"\"></p>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . //ga</span><br><span class=\"line\">git status //gs</span><br><span class=\"line\">git diff //gd</span><br><span class=\"line\">git commit -m &quot;desc&quot; //gcm</span><br><span class=\"line\">git push //gp</span><br><span class=\"line\">git checkout -b feature_1 //gcb</span><br><span class=\"line\">git pull origin master //gpom</span><br></pre></td></tr></table></figure>\n<h2 id=\"偶尔用到\"><a href=\"#偶尔用到\" class=\"headerlink\" title=\"偶尔用到\"></a>偶尔用到</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin dev_2 </span><br><span class=\"line\">git stash</span><br><span class=\"line\">git log</span><br><span class=\"line\">git cherry-pick xxx</span><br><span class=\"line\">git init</span><br><span class=\"line\">git clone</span><br></pre></td></tr></table></figure>\n<h3 id=\"很少用到\"><a href=\"#很少用到\" class=\"headerlink\" title=\"很少用到\"></a>很少用到</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;muName&quot;</span><br><span class=\"line\">git config --global user.email &quot;myEmail&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"GET-NEW-THING\"><a href=\"#GET-NEW-THING\" class=\"headerlink\" title=\"GET NEW THING\"></a>GET NEW THING</h3><h4 id=\"比对-diff\"><a href=\"#比对-diff\" class=\"headerlink\" title=\"比对 diff\"></a>比对 diff</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff 比对当前内容和暂存区内容。</span><br><span class=\"line\">git diff HEAD 比对当前内容和最近一次提交。</span><br><span class=\"line\">git diff HEAD^ 比对当前内容和倒数第二次提交。</span><br><span class=\"line\">git diff HEAD^ HEAD 比对最近两次提交。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简图\"><a href=\"#简图\" class=\"headerlink\" title=\"简图\"></a>简图</h1><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fwy5q46d3lj215k10nabc.jpg\" alt=\"\"></p>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . //ga</span><br><span class=\"line\">git status //gs</span><br><span class=\"line\">git diff //gd</span><br><span class=\"line\">git commit -m &quot;desc&quot; //gcm</span><br><span class=\"line\">git push //gp</span><br><span class=\"line\">git checkout -b feature_1 //gcb</span><br><span class=\"line\">git pull origin master //gpom</span><br></pre></td></tr></table></figure>\n<h2 id=\"偶尔用到\"><a href=\"#偶尔用到\" class=\"headerlink\" title=\"偶尔用到\"></a>偶尔用到</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin dev_2 </span><br><span class=\"line\">git stash</span><br><span class=\"line\">git log</span><br><span class=\"line\">git cherry-pick xxx</span><br><span class=\"line\">git init</span><br><span class=\"line\">git clone</span><br></pre></td></tr></table></figure>\n<h3 id=\"很少用到\"><a href=\"#很少用到\" class=\"headerlink\" title=\"很少用到\"></a>很少用到</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;muName&quot;</span><br><span class=\"line\">git config --global user.email &quot;myEmail&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"GET-NEW-THING\"><a href=\"#GET-NEW-THING\" class=\"headerlink\" title=\"GET NEW THING\"></a>GET NEW THING</h3><h4 id=\"比对-diff\"><a href=\"#比对-diff\" class=\"headerlink\" title=\"比对 diff\"></a>比对 diff</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff 比对当前内容和暂存区内容。</span><br><span class=\"line\">git diff HEAD 比对当前内容和最近一次提交。</span><br><span class=\"line\">git diff HEAD^ 比对当前内容和倒数第二次提交。</span><br><span class=\"line\">git diff HEAD^ HEAD 比对最近两次提交。</span><br></pre></td></tr></table></figure>\n"},{"title":"常用工具使用","date":"2018-09-19T06:29:54.000Z","_content":"### 优点\n\n1. 轻量\n2. 可以直接打开文件夹&文件\n3. 可以安装各种插件\n\n### 快键键\n\n#### 常用\n```\nctrl+` 打开控制台\nf12 查看定义\nctrl+-回退\nctrl+shift+-前进\ncmd+f 查询/替换\nalt+shift+选择 竖行选择\n```","source":"_posts/tool/常用工具使用.md","raw":"---\ntitle: 常用工具使用\ntags:\n  - vscode\ncategories:\n  - tool\ndate: 2018-09-19 14:29:54\n---\n### 优点\n\n1. 轻量\n2. 可以直接打开文件夹&文件\n3. 可以安装各种插件\n\n### 快键键\n\n#### 常用\n```\nctrl+` 打开控制台\nf12 查看定义\nctrl+-回退\nctrl+shift+-前进\ncmd+f 查询/替换\nalt+shift+选择 竖行选择\n```","slug":"tool/常用工具使用","published":1,"updated":"2018-09-19T08:13:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4ic000hlls6i0hdis53","content":"<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>轻量</li>\n<li>可以直接打开文件夹&amp;文件</li>\n<li>可以安装各种插件</li>\n</ol>\n<h3 id=\"快键键\"><a href=\"#快键键\" class=\"headerlink\" title=\"快键键\"></a>快键键</h3><h4 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl+` 打开控制台</span><br><span class=\"line\">f12 查看定义</span><br><span class=\"line\">ctrl+-回退</span><br><span class=\"line\">ctrl+shift+-前进</span><br><span class=\"line\">cmd+f 查询/替换</span><br><span class=\"line\">alt+shift+选择 竖行选择</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>轻量</li>\n<li>可以直接打开文件夹&amp;文件</li>\n<li>可以安装各种插件</li>\n</ol>\n<h3 id=\"快键键\"><a href=\"#快键键\" class=\"headerlink\" title=\"快键键\"></a>快键键</h3><h4 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl+` 打开控制台</span><br><span class=\"line\">f12 查看定义</span><br><span class=\"line\">ctrl+-回退</span><br><span class=\"line\">ctrl+shift+-前进</span><br><span class=\"line\">cmd+f 查询/替换</span><br><span class=\"line\">alt+shift+选择 竖行选择</span><br></pre></td></tr></table></figure>"},{"title":"mapreduce-intro","date":"2018-09-20T12:50:28.000Z","_content":"# 1 什么是MapReduce？\n　　Map本意可以理解为地图，映射（面向对象语言都有Map集合），这里我们可以理解为从现实世界获得或产生映射。Reduce本意是减少的意思，这里我们可以理解为归并前面Map产生的映射。\n\n# 2 MapReduce的编程模型\n　　按照google的MapReduce论文所说的，MapReduce的编程模型的原理是：利用一个输入key/value对集合来产生一个输出的key/value对集合。MapReduce库的用户用两个函数表达这个计算：Map和Reduce。用户自定义的Map函数接受一个输入的key/value对值，然后产生一个中间key/value对值的集合。MapReduce库把所有具有相同中间key值的中间value值集合在一起后传递给Reduce函数。用户自定义的Reduce函数接受一个中间key的值和相关的一个value值的集合。Reduce函数合并这些value值，形成一个较小的value值的集合。\n\n# 3 MapReduce实现\n　　通过将Map调用的输入数据自动分割为M个数据片段的集合，Map调用被分布到多台机器上执行。输入的数据片段能够在不同的机器上并行处理。使用分区函数将Map调用产生的中间key值分成R个不同分区（例如，hash(key) mod R），Reduce调用也被分布到多台机器上执行。分区数量（R）和分区函数由用户来指定。\n\n　　MapReduce实现的大概过程如下：\n\n　　1.用户程序首先调用的MapReduce库将输入文件分成M个数据片度，每个数据片段的大小一般从16MB到64MB(可以通过可选的参数来控制每个数据片段的大小)。然后用户程序在集群中创建大量的程序副本。\n\n　　2.这些程序副本中的有一个特殊的程序master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。 \n\n　　3.被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value对，然后把key/value对传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value对，并缓存在内存中。 \n\n　　4.缓存中的key/value对通过分区函数分成R个区域，之后周期性的写入到本地磁盘上，会产生R个临时文件。缓存的key/value对在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce worker。 \n\n　　5.当Reduce worker程序接收到master程序发来的数据存储位置信息后，使用RPC从Map worker所在主机的磁盘上读取这些缓存数据。当Reduce worker读取了所有的中间数据（这个时候所有的Map任务都执行完了）后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。 \n\n　　6.Reduce worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce worker程序将这个key值和它相关的中间value值的集合（这个集合是由Reduce worker产生的，它存放的是同一个key对应的value值）传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。 \n\n　　上面过程中的排序很容易理解，关键是分区，这一步最终决定该键值对未来会交给哪个reduce任务，如统计单词出现的次数可以用前面说的hash(key) mod R来分区，如果是对数据进行排序则应该根据key的分布进行分区。\n\n\n\n图1 MapReduce过程\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvgargrvu2j20cs0k7dgf.jpg)\n \n\n# 4 例子\n　　假设我们需要处理一批有关天气的数据，其格式如下： 按照ASCII码存储，每行一条记录，每一行字符从0开始计数，第15个到第18个字符为年，第25个到第29个字符为温度，其中第25位是符号+/-，现在需要统计出每年的最高温度。\n\n　　0067011990999991950051507+0000+ \n　　0043011990999991950051512+0022+ \n　　0043011990999991950051518-0011+ \n　　0043012650999991949032412+0111+ \n　　0043012650999991949032418+0078+ \n　　0067011990999991937051507+0001+ \n　　0043011990999991937051512-0002+ \n　　0043011990999991945051518+0001+ \n　　0043012650999991945032412+0002+ \n　　0043012650999991945032418+0078+ \n\n　　MapReduce主要包括两个步骤：Map和Reduce 每一步都有key/value对作为输入和输出： \n\n　　Map阶段的key/value对的格式是由输入的格式所决定的，如果是默认的TextInputFormat，则每行作为一个记录进程处理，其中key为此行的开头相对于文件的起始位置，value就是此行的字符文本，Map阶段的输出的key/value对的格式必须同Reduce阶段的输入key/value对的格式相对应\n\n　　对于上面的例子，在map过程，输入的key-value对如下： \n　　(0 ,0067011990999991950051507+0000+) \n　　(1 ,0043011990999991950051512+0022+) \n　　(2 ,0043011990999991950051518-0011+) \n　　(3 ,0043012650999991949032412+0111+) \n　　(4 ,0043012650999991949032418+0078+) \n　　(5 ,0067011990999991937051507+0001+) \n　　(6 ,0043011990999991937051512-0002+) \n　　(7 ,0043011990999991945051518+0001+) \n　　(8 ,0043012650999991945032412+0002+) \n　　(9 ,0043012650999991945032418+0078+) \n\n　　将上面的数据作为用户编写的map函数的输入，通过对每一行字符串的解析，得到年/温度的key/value对作为输出： \n　　(1950, 0) \n　　(1950, 22) \n　　(1950, -11) \n　　(1949, 111) \n　　(1949, 78) \n　　(1937, 1) \n　　(1937, -2) \n　　(1945, 1) \n　　(1945, 2) \n　　(1945, 78) \n\n　　在Reduce过程，将map过程中的输出，按照相同的key将value放到同一个列表中作为用户写的reduce函数的输入 \n　　(1950, [0, 22, –11]) \n　　(1949, [111, 78]) \n　　(1937, [1, -2]) \n　　(1945, [1, 2, 78]) \n\n\n　　在Reduce过程中，在列表中选择出最大的温度，将年/最大温度的key/value作为输出： \n　　(1950, 22) \n　　(1949, 111) \n　　(1937, 1) \n　　(1945, 78) \n\n\n　　其逻辑过程可用如下图表示： \n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvgarwkdo0j20hw03zjt4.jpg)\n\n\n\n 参考：\n\nhttp://desert3.iteye.com/blog/865243\n\nhttp://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html\n\nhttp://www.cnblogs.com/MitiskySean/p/3320451.html","source":"_posts/mit-6.824/lecture1/mapreduce-intro.md","raw":"---\ntitle: mapreduce-intro\ntags:\n  - mapreduce\ncategories:\n  - 分布式\ndate: 2018-09-20 20:50:28\n---\n# 1 什么是MapReduce？\n　　Map本意可以理解为地图，映射（面向对象语言都有Map集合），这里我们可以理解为从现实世界获得或产生映射。Reduce本意是减少的意思，这里我们可以理解为归并前面Map产生的映射。\n\n# 2 MapReduce的编程模型\n　　按照google的MapReduce论文所说的，MapReduce的编程模型的原理是：利用一个输入key/value对集合来产生一个输出的key/value对集合。MapReduce库的用户用两个函数表达这个计算：Map和Reduce。用户自定义的Map函数接受一个输入的key/value对值，然后产生一个中间key/value对值的集合。MapReduce库把所有具有相同中间key值的中间value值集合在一起后传递给Reduce函数。用户自定义的Reduce函数接受一个中间key的值和相关的一个value值的集合。Reduce函数合并这些value值，形成一个较小的value值的集合。\n\n# 3 MapReduce实现\n　　通过将Map调用的输入数据自动分割为M个数据片段的集合，Map调用被分布到多台机器上执行。输入的数据片段能够在不同的机器上并行处理。使用分区函数将Map调用产生的中间key值分成R个不同分区（例如，hash(key) mod R），Reduce调用也被分布到多台机器上执行。分区数量（R）和分区函数由用户来指定。\n\n　　MapReduce实现的大概过程如下：\n\n　　1.用户程序首先调用的MapReduce库将输入文件分成M个数据片度，每个数据片段的大小一般从16MB到64MB(可以通过可选的参数来控制每个数据片段的大小)。然后用户程序在集群中创建大量的程序副本。\n\n　　2.这些程序副本中的有一个特殊的程序master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。 \n\n　　3.被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value对，然后把key/value对传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value对，并缓存在内存中。 \n\n　　4.缓存中的key/value对通过分区函数分成R个区域，之后周期性的写入到本地磁盘上，会产生R个临时文件。缓存的key/value对在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce worker。 \n\n　　5.当Reduce worker程序接收到master程序发来的数据存储位置信息后，使用RPC从Map worker所在主机的磁盘上读取这些缓存数据。当Reduce worker读取了所有的中间数据（这个时候所有的Map任务都执行完了）后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。 \n\n　　6.Reduce worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce worker程序将这个key值和它相关的中间value值的集合（这个集合是由Reduce worker产生的，它存放的是同一个key对应的value值）传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。 \n\n　　上面过程中的排序很容易理解，关键是分区，这一步最终决定该键值对未来会交给哪个reduce任务，如统计单词出现的次数可以用前面说的hash(key) mod R来分区，如果是对数据进行排序则应该根据key的分布进行分区。\n\n\n\n图1 MapReduce过程\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvgargrvu2j20cs0k7dgf.jpg)\n \n\n# 4 例子\n　　假设我们需要处理一批有关天气的数据，其格式如下： 按照ASCII码存储，每行一条记录，每一行字符从0开始计数，第15个到第18个字符为年，第25个到第29个字符为温度，其中第25位是符号+/-，现在需要统计出每年的最高温度。\n\n　　0067011990999991950051507+0000+ \n　　0043011990999991950051512+0022+ \n　　0043011990999991950051518-0011+ \n　　0043012650999991949032412+0111+ \n　　0043012650999991949032418+0078+ \n　　0067011990999991937051507+0001+ \n　　0043011990999991937051512-0002+ \n　　0043011990999991945051518+0001+ \n　　0043012650999991945032412+0002+ \n　　0043012650999991945032418+0078+ \n\n　　MapReduce主要包括两个步骤：Map和Reduce 每一步都有key/value对作为输入和输出： \n\n　　Map阶段的key/value对的格式是由输入的格式所决定的，如果是默认的TextInputFormat，则每行作为一个记录进程处理，其中key为此行的开头相对于文件的起始位置，value就是此行的字符文本，Map阶段的输出的key/value对的格式必须同Reduce阶段的输入key/value对的格式相对应\n\n　　对于上面的例子，在map过程，输入的key-value对如下： \n　　(0 ,0067011990999991950051507+0000+) \n　　(1 ,0043011990999991950051512+0022+) \n　　(2 ,0043011990999991950051518-0011+) \n　　(3 ,0043012650999991949032412+0111+) \n　　(4 ,0043012650999991949032418+0078+) \n　　(5 ,0067011990999991937051507+0001+) \n　　(6 ,0043011990999991937051512-0002+) \n　　(7 ,0043011990999991945051518+0001+) \n　　(8 ,0043012650999991945032412+0002+) \n　　(9 ,0043012650999991945032418+0078+) \n\n　　将上面的数据作为用户编写的map函数的输入，通过对每一行字符串的解析，得到年/温度的key/value对作为输出： \n　　(1950, 0) \n　　(1950, 22) \n　　(1950, -11) \n　　(1949, 111) \n　　(1949, 78) \n　　(1937, 1) \n　　(1937, -2) \n　　(1945, 1) \n　　(1945, 2) \n　　(1945, 78) \n\n　　在Reduce过程，将map过程中的输出，按照相同的key将value放到同一个列表中作为用户写的reduce函数的输入 \n　　(1950, [0, 22, –11]) \n　　(1949, [111, 78]) \n　　(1937, [1, -2]) \n　　(1945, [1, 2, 78]) \n\n\n　　在Reduce过程中，在列表中选择出最大的温度，将年/最大温度的key/value作为输出： \n　　(1950, 22) \n　　(1949, 111) \n　　(1937, 1) \n　　(1945, 78) \n\n\n　　其逻辑过程可用如下图表示： \n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvgarwkdo0j20hw03zjt4.jpg)\n\n\n\n 参考：\n\nhttp://desert3.iteye.com/blog/865243\n\nhttp://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html\n\nhttp://www.cnblogs.com/MitiskySean/p/3320451.html","slug":"mit-6.824/lecture1/mapreduce-intro","published":1,"updated":"2018-09-20T12:55:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4l9001dlls62zalvpek","content":"<h1 id=\"1-什么是MapReduce？\"><a href=\"#1-什么是MapReduce？\" class=\"headerlink\" title=\"1 什么是MapReduce？\"></a>1 什么是MapReduce？</h1><p>　　Map本意可以理解为地图，映射（面向对象语言都有Map集合），这里我们可以理解为从现实世界获得或产生映射。Reduce本意是减少的意思，这里我们可以理解为归并前面Map产生的映射。</p>\n<h1 id=\"2-MapReduce的编程模型\"><a href=\"#2-MapReduce的编程模型\" class=\"headerlink\" title=\"2 MapReduce的编程模型\"></a>2 MapReduce的编程模型</h1><p>　　按照google的MapReduce论文所说的，MapReduce的编程模型的原理是：利用一个输入key/value对集合来产生一个输出的key/value对集合。MapReduce库的用户用两个函数表达这个计算：Map和Reduce。用户自定义的Map函数接受一个输入的key/value对值，然后产生一个中间key/value对值的集合。MapReduce库把所有具有相同中间key值的中间value值集合在一起后传递给Reduce函数。用户自定义的Reduce函数接受一个中间key的值和相关的一个value值的集合。Reduce函数合并这些value值，形成一个较小的value值的集合。</p>\n<h1 id=\"3-MapReduce实现\"><a href=\"#3-MapReduce实现\" class=\"headerlink\" title=\"3 MapReduce实现\"></a>3 MapReduce实现</h1><p>　　通过将Map调用的输入数据自动分割为M个数据片段的集合，Map调用被分布到多台机器上执行。输入的数据片段能够在不同的机器上并行处理。使用分区函数将Map调用产生的中间key值分成R个不同分区（例如，hash(key) mod R），Reduce调用也被分布到多台机器上执行。分区数量（R）和分区函数由用户来指定。</p>\n<p>　　MapReduce实现的大概过程如下：</p>\n<p>　　1.用户程序首先调用的MapReduce库将输入文件分成M个数据片度，每个数据片段的大小一般从16MB到64MB(可以通过可选的参数来控制每个数据片段的大小)。然后用户程序在集群中创建大量的程序副本。</p>\n<p>　　2.这些程序副本中的有一个特殊的程序master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。 </p>\n<p>　　3.被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value对，然后把key/value对传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value对，并缓存在内存中。 </p>\n<p>　　4.缓存中的key/value对通过分区函数分成R个区域，之后周期性的写入到本地磁盘上，会产生R个临时文件。缓存的key/value对在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce worker。 </p>\n<p>　　5.当Reduce worker程序接收到master程序发来的数据存储位置信息后，使用RPC从Map worker所在主机的磁盘上读取这些缓存数据。当Reduce worker读取了所有的中间数据（这个时候所有的Map任务都执行完了）后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。 </p>\n<p>　　6.Reduce worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce worker程序将这个key值和它相关的中间value值的集合（这个集合是由Reduce worker产生的，它存放的是同一个key对应的value值）传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。 </p>\n<p>　　上面过程中的排序很容易理解，关键是分区，这一步最终决定该键值对未来会交给哪个reduce任务，如统计单词出现的次数可以用前面说的hash(key) mod R来分区，如果是对数据进行排序则应该根据key的分布进行分区。</p>\n<p>图1 MapReduce过程<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvgargrvu2j20cs0k7dgf.jpg\" alt=\"\"></p>\n<h1 id=\"4-例子\"><a href=\"#4-例子\" class=\"headerlink\" title=\"4 例子\"></a>4 例子</h1><p>　　假设我们需要处理一批有关天气的数据，其格式如下： 按照ASCII码存储，每行一条记录，每一行字符从0开始计数，第15个到第18个字符为年，第25个到第29个字符为温度，其中第25位是符号+/-，现在需要统计出每年的最高温度。</p>\n<p>　　0067011990999991950051507+0000+<br>　　0043011990999991950051512+0022+<br>　　0043011990999991950051518-0011+<br>　　0043012650999991949032412+0111+<br>　　0043012650999991949032418+0078+<br>　　0067011990999991937051507+0001+<br>　　0043011990999991937051512-0002+<br>　　0043011990999991945051518+0001+<br>　　0043012650999991945032412+0002+<br>　　0043012650999991945032418+0078+ </p>\n<p>　　MapReduce主要包括两个步骤：Map和Reduce 每一步都有key/value对作为输入和输出： </p>\n<p>　　Map阶段的key/value对的格式是由输入的格式所决定的，如果是默认的TextInputFormat，则每行作为一个记录进程处理，其中key为此行的开头相对于文件的起始位置，value就是此行的字符文本，Map阶段的输出的key/value对的格式必须同Reduce阶段的输入key/value对的格式相对应</p>\n<p>　　对于上面的例子，在map过程，输入的key-value对如下：<br>　　(0 ,0067011990999991950051507+0000+)<br>　　(1 ,0043011990999991950051512+0022+)<br>　　(2 ,0043011990999991950051518-0011+)<br>　　(3 ,0043012650999991949032412+0111+)<br>　　(4 ,0043012650999991949032418+0078+)<br>　　(5 ,0067011990999991937051507+0001+)<br>　　(6 ,0043011990999991937051512-0002+)<br>　　(7 ,0043011990999991945051518+0001+)<br>　　(8 ,0043012650999991945032412+0002+)<br>　　(9 ,0043012650999991945032418+0078+) </p>\n<p>　　将上面的数据作为用户编写的map函数的输入，通过对每一行字符串的解析，得到年/温度的key/value对作为输出：<br>　　(1950, 0)<br>　　(1950, 22)<br>　　(1950, -11)<br>　　(1949, 111)<br>　　(1949, 78)<br>　　(1937, 1)<br>　　(1937, -2)<br>　　(1945, 1)<br>　　(1945, 2)<br>　　(1945, 78) </p>\n<p>　　在Reduce过程，将map过程中的输出，按照相同的key将value放到同一个列表中作为用户写的reduce函数的输入<br>　　(1950, [0, 22, –11])<br>　　(1949, [111, 78])<br>　　(1937, [1, -2])<br>　　(1945, [1, 2, 78]) </p>\n<p>　　在Reduce过程中，在列表中选择出最大的温度，将年/最大温度的key/value作为输出：<br>　　(1950, 22)<br>　　(1949, 111)<br>　　(1937, 1)<br>　　(1945, 78) </p>\n<p>　　其逻辑过程可用如下图表示：<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvgarwkdo0j20hw03zjt4.jpg\" alt=\"\"></p>\n<p> 参考：</p>\n<p><a href=\"http://desert3.iteye.com/blog/865243\" target=\"_blank\" rel=\"noopener\">http://desert3.iteye.com/blog/865243</a></p>\n<p><a href=\"http://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html</a></p>\n<p><a href=\"http://www.cnblogs.com/MitiskySean/p/3320451.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/MitiskySean/p/3320451.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-什么是MapReduce？\"><a href=\"#1-什么是MapReduce？\" class=\"headerlink\" title=\"1 什么是MapReduce？\"></a>1 什么是MapReduce？</h1><p>　　Map本意可以理解为地图，映射（面向对象语言都有Map集合），这里我们可以理解为从现实世界获得或产生映射。Reduce本意是减少的意思，这里我们可以理解为归并前面Map产生的映射。</p>\n<h1 id=\"2-MapReduce的编程模型\"><a href=\"#2-MapReduce的编程模型\" class=\"headerlink\" title=\"2 MapReduce的编程模型\"></a>2 MapReduce的编程模型</h1><p>　　按照google的MapReduce论文所说的，MapReduce的编程模型的原理是：利用一个输入key/value对集合来产生一个输出的key/value对集合。MapReduce库的用户用两个函数表达这个计算：Map和Reduce。用户自定义的Map函数接受一个输入的key/value对值，然后产生一个中间key/value对值的集合。MapReduce库把所有具有相同中间key值的中间value值集合在一起后传递给Reduce函数。用户自定义的Reduce函数接受一个中间key的值和相关的一个value值的集合。Reduce函数合并这些value值，形成一个较小的value值的集合。</p>\n<h1 id=\"3-MapReduce实现\"><a href=\"#3-MapReduce实现\" class=\"headerlink\" title=\"3 MapReduce实现\"></a>3 MapReduce实现</h1><p>　　通过将Map调用的输入数据自动分割为M个数据片段的集合，Map调用被分布到多台机器上执行。输入的数据片段能够在不同的机器上并行处理。使用分区函数将Map调用产生的中间key值分成R个不同分区（例如，hash(key) mod R），Reduce调用也被分布到多台机器上执行。分区数量（R）和分区函数由用户来指定。</p>\n<p>　　MapReduce实现的大概过程如下：</p>\n<p>　　1.用户程序首先调用的MapReduce库将输入文件分成M个数据片度，每个数据片段的大小一般从16MB到64MB(可以通过可选的参数来控制每个数据片段的大小)。然后用户程序在集群中创建大量的程序副本。</p>\n<p>　　2.这些程序副本中的有一个特殊的程序master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。 </p>\n<p>　　3.被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value对，然后把key/value对传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value对，并缓存在内存中。 </p>\n<p>　　4.缓存中的key/value对通过分区函数分成R个区域，之后周期性的写入到本地磁盘上，会产生R个临时文件。缓存的key/value对在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce worker。 </p>\n<p>　　5.当Reduce worker程序接收到master程序发来的数据存储位置信息后，使用RPC从Map worker所在主机的磁盘上读取这些缓存数据。当Reduce worker读取了所有的中间数据（这个时候所有的Map任务都执行完了）后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。 </p>\n<p>　　6.Reduce worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce worker程序将这个key值和它相关的中间value值的集合（这个集合是由Reduce worker产生的，它存放的是同一个key对应的value值）传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。 </p>\n<p>　　上面过程中的排序很容易理解，关键是分区，这一步最终决定该键值对未来会交给哪个reduce任务，如统计单词出现的次数可以用前面说的hash(key) mod R来分区，如果是对数据进行排序则应该根据key的分布进行分区。</p>\n<p>图1 MapReduce过程<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvgargrvu2j20cs0k7dgf.jpg\" alt=\"\"></p>\n<h1 id=\"4-例子\"><a href=\"#4-例子\" class=\"headerlink\" title=\"4 例子\"></a>4 例子</h1><p>　　假设我们需要处理一批有关天气的数据，其格式如下： 按照ASCII码存储，每行一条记录，每一行字符从0开始计数，第15个到第18个字符为年，第25个到第29个字符为温度，其中第25位是符号+/-，现在需要统计出每年的最高温度。</p>\n<p>　　0067011990999991950051507+0000+<br>　　0043011990999991950051512+0022+<br>　　0043011990999991950051518-0011+<br>　　0043012650999991949032412+0111+<br>　　0043012650999991949032418+0078+<br>　　0067011990999991937051507+0001+<br>　　0043011990999991937051512-0002+<br>　　0043011990999991945051518+0001+<br>　　0043012650999991945032412+0002+<br>　　0043012650999991945032418+0078+ </p>\n<p>　　MapReduce主要包括两个步骤：Map和Reduce 每一步都有key/value对作为输入和输出： </p>\n<p>　　Map阶段的key/value对的格式是由输入的格式所决定的，如果是默认的TextInputFormat，则每行作为一个记录进程处理，其中key为此行的开头相对于文件的起始位置，value就是此行的字符文本，Map阶段的输出的key/value对的格式必须同Reduce阶段的输入key/value对的格式相对应</p>\n<p>　　对于上面的例子，在map过程，输入的key-value对如下：<br>　　(0 ,0067011990999991950051507+0000+)<br>　　(1 ,0043011990999991950051512+0022+)<br>　　(2 ,0043011990999991950051518-0011+)<br>　　(3 ,0043012650999991949032412+0111+)<br>　　(4 ,0043012650999991949032418+0078+)<br>　　(5 ,0067011990999991937051507+0001+)<br>　　(6 ,0043011990999991937051512-0002+)<br>　　(7 ,0043011990999991945051518+0001+)<br>　　(8 ,0043012650999991945032412+0002+)<br>　　(9 ,0043012650999991945032418+0078+) </p>\n<p>　　将上面的数据作为用户编写的map函数的输入，通过对每一行字符串的解析，得到年/温度的key/value对作为输出：<br>　　(1950, 0)<br>　　(1950, 22)<br>　　(1950, -11)<br>　　(1949, 111)<br>　　(1949, 78)<br>　　(1937, 1)<br>　　(1937, -2)<br>　　(1945, 1)<br>　　(1945, 2)<br>　　(1945, 78) </p>\n<p>　　在Reduce过程，将map过程中的输出，按照相同的key将value放到同一个列表中作为用户写的reduce函数的输入<br>　　(1950, [0, 22, –11])<br>　　(1949, [111, 78])<br>　　(1937, [1, -2])<br>　　(1945, [1, 2, 78]) </p>\n<p>　　在Reduce过程中，在列表中选择出最大的温度，将年/最大温度的key/value作为输出：<br>　　(1950, 22)<br>　　(1949, 111)<br>　　(1937, 1)<br>　　(1945, 78) </p>\n<p>　　其逻辑过程可用如下图表示：<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvgarwkdo0j20hw03zjt4.jpg\" alt=\"\"></p>\n<p> 参考：</p>\n<p><a href=\"http://desert3.iteye.com/blog/865243\" target=\"_blank\" rel=\"noopener\">http://desert3.iteye.com/blog/865243</a></p>\n<p><a href=\"http://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html</a></p>\n<p><a href=\"http://www.cnblogs.com/MitiskySean/p/3320451.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/MitiskySean/p/3320451.html</a></p>\n"},{"title":"go-bytes.Buffer","date":"2018-09-19T07:46:07.000Z","_content":"# bytes.Buffer\n\n## java StringBuilder\n\n```java\nStringBuilder sb = new StringBuilder();\nsb.append(\"hello\");\nsb.append(\",world\");\nSystem.out.println(sb.toString());\n```\n\n## go bytes.Buffer\n\n```go\nvar bb bytes.Buffer\nbb.WriteString(\"[\")\nbb.WriteString(\"]\")\nfmt.Println(bb.String())\n```","source":"_posts/stack/golang/go-bytes-Buffer.md","raw":"---\ntitle: go-bytes.Buffer\ntags:\n  - buffer\ncategories:\n  - go\ndate: 2018-09-19 15:46:07\n---\n# bytes.Buffer\n\n## java StringBuilder\n\n```java\nStringBuilder sb = new StringBuilder();\nsb.append(\"hello\");\nsb.append(\",world\");\nSystem.out.println(sb.toString());\n```\n\n## go bytes.Buffer\n\n```go\nvar bb bytes.Buffer\nbb.WriteString(\"[\")\nbb.WriteString(\"]\")\nfmt.Println(bb.String())\n```","slug":"stack/golang/go-bytes-Buffer","published":1,"updated":"2018-09-19T08:06:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4la001ells6sjoyss4c","content":"<h1 id=\"bytes-Buffer\"><a href=\"#bytes-Buffer\" class=\"headerlink\" title=\"bytes.Buffer\"></a>bytes.Buffer</h1><h2 id=\"java-StringBuilder\"><a href=\"#java-StringBuilder\" class=\"headerlink\" title=\"java StringBuilder\"></a>java StringBuilder</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.append(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">sb.append(<span class=\"string\">\",world\"</span>);</span><br><span class=\"line\">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>\n<h2 id=\"go-bytes-Buffer\"><a href=\"#go-bytes-Buffer\" class=\"headerlink\" title=\"go bytes.Buffer\"></a>go bytes.Buffer</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bb bytes.Buffer</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"[\"</span>)</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"]\"</span>)</span><br><span class=\"line\">fmt.Println(bb.String())</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"bytes-Buffer\"><a href=\"#bytes-Buffer\" class=\"headerlink\" title=\"bytes.Buffer\"></a>bytes.Buffer</h1><h2 id=\"java-StringBuilder\"><a href=\"#java-StringBuilder\" class=\"headerlink\" title=\"java StringBuilder\"></a>java StringBuilder</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.append(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">sb.append(<span class=\"string\">\",world\"</span>);</span><br><span class=\"line\">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>\n<h2 id=\"go-bytes-Buffer\"><a href=\"#go-bytes-Buffer\" class=\"headerlink\" title=\"go bytes.Buffer\"></a>go bytes.Buffer</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bb bytes.Buffer</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"[\"</span>)</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"]\"</span>)</span><br><span class=\"line\">fmt.Println(bb.String())</span><br></pre></td></tr></table></figure>"},{"title":"go-standard-library-intro","date":"2018-09-26T12:00:02.000Z","_content":"\n# 简图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvn6xqiuk6j21b80undos.jpg)","source":"_posts/stack/golang/go-standard-library-intro.md","raw":"---\ntitle: go-standard-library-intro\ntags:\n  - 标准库\ncategories:\n  - go\ndate: 2018-09-26 20:00:02\n---\n\n# 简图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvn6xqiuk6j21b80undos.jpg)","slug":"stack/golang/go-standard-library-intro","published":1,"updated":"2018-09-26T12:00:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4lb001hlls6gb9og3pl","content":"<h1 id=\"简图\"><a href=\"#简图\" class=\"headerlink\" title=\"简图\"></a>简图</h1><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvn6xqiuk6j21b80undos.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简图\"><a href=\"#简图\" class=\"headerlink\" title=\"简图\"></a>简图</h1><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvn6xqiuk6j21b80undos.jpg\" alt=\"\"></p>\n"},{"title":"go-踩坑点","date":"2018-09-19T02:53:27.000Z","_content":"# go遇到的一些问题\n\n\n###  chan关闭之后，还可以读写吗？\n> 不能写，但可以读\n~~~\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar ret = make(chan []int, 1000)\n\tvar wg = sync.WaitGroup{}\n\twg.Add(3)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 10; i < 20; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 20; i < 30; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\twg.Wait()\n\t//go func() {\n\t//\tfor {\n\t//\t\tret <- []int{1}\n\t//\t\ttime.Sleep(time.Second)\n\t//\t}\n\t//}()\n\t//close(ret)\n\tfor v := range ret { //0 range if v==0 break ,or panic\n\t\tfor _, v := range v {\n\t\t\tfmt.Println(v)\n\t\t}\n\t}\n}\n\n~~~\n\n### 并发获取数据，常见问题\n~~~\nfor _,v:=range uids{\n\tgo func(){\n    \tfmt.Println(v)//v的值是一样的！\n    }()\n}\n==》\nfor _,v:=range uids{\n\tgo func(v int){\n    \tfmt.Println(v)//v的值正常\n    }(v)\n}\n~~~","source":"_posts/stack/golang/go-踩坑点.md","raw":"---\ntitle: go-踩坑点\ndate: 2018-09-19 10:53:27\ncategories: \n- go\ntags:\n- go \n---\n# go遇到的一些问题\n\n\n###  chan关闭之后，还可以读写吗？\n> 不能写，但可以读\n~~~\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar ret = make(chan []int, 1000)\n\tvar wg = sync.WaitGroup{}\n\twg.Add(3)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 10; i < 20; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 20; i < 30; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\twg.Wait()\n\t//go func() {\n\t//\tfor {\n\t//\t\tret <- []int{1}\n\t//\t\ttime.Sleep(time.Second)\n\t//\t}\n\t//}()\n\t//close(ret)\n\tfor v := range ret { //0 range if v==0 break ,or panic\n\t\tfor _, v := range v {\n\t\t\tfmt.Println(v)\n\t\t}\n\t}\n}\n\n~~~\n\n### 并发获取数据，常见问题\n~~~\nfor _,v:=range uids{\n\tgo func(){\n    \tfmt.Println(v)//v的值是一样的！\n    }()\n}\n==》\nfor _,v:=range uids{\n\tgo func(v int){\n    \tfmt.Println(v)//v的值正常\n    }(v)\n}\n~~~","slug":"stack/golang/go-踩坑点","published":1,"updated":"2018-09-19T08:06:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4le001ills6vou4usy2","content":"<h1 id=\"go遇到的一些问题\"><a href=\"#go遇到的一些问题\" class=\"headerlink\" title=\"go遇到的一些问题\"></a>go遇到的一些问题</h1><h3 id=\"chan关闭之后，还可以读写吗？\"><a href=\"#chan关闭之后，还可以读写吗？\" class=\"headerlink\" title=\"chan关闭之后，还可以读写吗？\"></a>chan关闭之后，还可以读写吗？</h3><blockquote>\n<p>不能写，但可以读<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;sync&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar ret = make(chan []int, 1000)</span><br><span class=\"line\">\tvar wg = sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\twg.Add(3)</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 10; i &lt; 20; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 20; i &lt; 30; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\t//go func() &#123;</span><br><span class=\"line\">\t//\tfor &#123;</span><br><span class=\"line\">\t//\t\tret &lt;- []int&#123;1&#125;</span><br><span class=\"line\">\t//\t\ttime.Sleep(time.Second)</span><br><span class=\"line\">\t//\t&#125;</span><br><span class=\"line\">\t//&#125;()</span><br><span class=\"line\">\t//close(ret)</span><br><span class=\"line\">\tfor v := range ret &#123; //0 range if v==0 break ,or panic</span><br><span class=\"line\">\t\tfor _, v := range v &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(v)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"并发获取数据，常见问题\"><a href=\"#并发获取数据，常见问题\" class=\"headerlink\" title=\"并发获取数据，常见问题\"></a>并发获取数据，常见问题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for _,v:=range uids&#123;</span><br><span class=\"line\">\tgo func()&#123;</span><br><span class=\"line\">    \tfmt.Println(v)//v的值是一样的！</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">==》</span><br><span class=\"line\">for _,v:=range uids&#123;</span><br><span class=\"line\">\tgo func(v int)&#123;</span><br><span class=\"line\">    \tfmt.Println(v)//v的值正常</span><br><span class=\"line\">    &#125;(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"go遇到的一些问题\"><a href=\"#go遇到的一些问题\" class=\"headerlink\" title=\"go遇到的一些问题\"></a>go遇到的一些问题</h1><h3 id=\"chan关闭之后，还可以读写吗？\"><a href=\"#chan关闭之后，还可以读写吗？\" class=\"headerlink\" title=\"chan关闭之后，还可以读写吗？\"></a>chan关闭之后，还可以读写吗？</h3><blockquote>\n<p>不能写，但可以读<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;sync&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar ret = make(chan []int, 1000)</span><br><span class=\"line\">\tvar wg = sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\twg.Add(3)</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 10; i &lt; 20; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 20; i &lt; 30; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\t//go func() &#123;</span><br><span class=\"line\">\t//\tfor &#123;</span><br><span class=\"line\">\t//\t\tret &lt;- []int&#123;1&#125;</span><br><span class=\"line\">\t//\t\ttime.Sleep(time.Second)</span><br><span class=\"line\">\t//\t&#125;</span><br><span class=\"line\">\t//&#125;()</span><br><span class=\"line\">\t//close(ret)</span><br><span class=\"line\">\tfor v := range ret &#123; //0 range if v==0 break ,or panic</span><br><span class=\"line\">\t\tfor _, v := range v &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(v)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"并发获取数据，常见问题\"><a href=\"#并发获取数据，常见问题\" class=\"headerlink\" title=\"并发获取数据，常见问题\"></a>并发获取数据，常见问题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for _,v:=range uids&#123;</span><br><span class=\"line\">\tgo func()&#123;</span><br><span class=\"line\">    \tfmt.Println(v)//v的值是一样的！</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">==》</span><br><span class=\"line\">for _,v:=range uids&#123;</span><br><span class=\"line\">\tgo func(v int)&#123;</span><br><span class=\"line\">    \tfmt.Println(v)//v的值正常</span><br><span class=\"line\">    &#125;(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"go-通道channel","date":"2018-09-19T02:52:42.000Z","_content":"# 通道\n\n两种配合方式：\n- range\n- select\n\n### range 方式\n~~~\n//关闭之后会跳出循环\nfor v:=range c{\n\t//todo\n}\n~~~\n\n### select 方式\n~~~\nfor {\n\tselect {\n    \tcase val,ok:=<-c:\n        \tif !ok{break}\n    }\n}\n~~~\n\n### Close(ch)含义\n给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。\n\n### 注意点\n- 从一个nil channel中接收数据会一直被block。\n\n- 从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。\n\n~~~\n//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。\n//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)\nx, ok := <-ch\n~~~","source":"_posts/stack/golang/go-通道channel.md","raw":"---\ntitle: go-通道channel\ndate: 2018-09-19 10:52:42\ncategories: \n- go\ntags:\n- go\n---\n# 通道\n\n两种配合方式：\n- range\n- select\n\n### range 方式\n~~~\n//关闭之后会跳出循环\nfor v:=range c{\n\t//todo\n}\n~~~\n\n### select 方式\n~~~\nfor {\n\tselect {\n    \tcase val,ok:=<-c:\n        \tif !ok{break}\n    }\n}\n~~~\n\n### Close(ch)含义\n给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。\n\n### 注意点\n- 从一个nil channel中接收数据会一直被block。\n\n- 从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。\n\n~~~\n//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。\n//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)\nx, ok := <-ch\n~~~","slug":"stack/golang/go-通道channel","published":1,"updated":"2018-09-19T08:06:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4lf001jlls6natb5i3a","content":"<h1 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h1><p>两种配合方式：</p>\n<ul>\n<li>range</li>\n<li>select</li>\n</ul>\n<h3 id=\"range-方式\"><a href=\"#range-方式\" class=\"headerlink\" title=\"range 方式\"></a>range 方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//关闭之后会跳出循环</span><br><span class=\"line\">for v:=range c&#123;</span><br><span class=\"line\">\t//todo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select-方式\"><a href=\"#select-方式\" class=\"headerlink\" title=\"select 方式\"></a>select 方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">    \tcase val,ok:=&lt;-c:</span><br><span class=\"line\">        \tif !ok&#123;break&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Close-ch-含义\"><a href=\"#Close-ch-含义\" class=\"headerlink\" title=\"Close(ch)含义\"></a>Close(ch)含义</h3><p>给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li><p>从一个nil channel中接收数据会一直被block。</p>\n</li>\n<li><p>从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。</span><br><span class=\"line\">//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)</span><br><span class=\"line\">x, ok := &lt;-ch</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h1><p>两种配合方式：</p>\n<ul>\n<li>range</li>\n<li>select</li>\n</ul>\n<h3 id=\"range-方式\"><a href=\"#range-方式\" class=\"headerlink\" title=\"range 方式\"></a>range 方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//关闭之后会跳出循环</span><br><span class=\"line\">for v:=range c&#123;</span><br><span class=\"line\">\t//todo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select-方式\"><a href=\"#select-方式\" class=\"headerlink\" title=\"select 方式\"></a>select 方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">    \tcase val,ok:=&lt;-c:</span><br><span class=\"line\">        \tif !ok&#123;break&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Close-ch-含义\"><a href=\"#Close-ch-含义\" class=\"headerlink\" title=\"Close(ch)含义\"></a>Close(ch)含义</h3><p>给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li><p>从一个nil channel中接收数据会一直被block。</p>\n</li>\n<li><p>从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。</span><br><span class=\"line\">//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)</span><br><span class=\"line\">x, ok := &lt;-ch</span><br></pre></td></tr></table></figure>"},{"title":"go-文件io","date":"2018-09-19T02:47:35.000Z","_content":"# golang 文件读写\n\n### 使用io/ioutil进行读写文件\n先回忆下之前的ioutil包介绍： \nGo语言学习之ioutil包(The way to go)\n\n其中提到了两个方法： \nfunc ReadFile\n\n`func ReadFile(filename string) ([]byte, error)`\n\nReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.\n\nfunc WriteFile\n\n\n`func WriteFile(filename string, data []byte, perm os.FileMode) error`\nWriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.\n\n读文件：\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n    b, err := ioutil.ReadFile(\"test.log\")\n    if err != nil {\n        fmt.Print(err)\n    }\n    fmt.Println(b)\n    str := string(b)\n    fmt.Println(str)\n}\n```\n\n写文件：\n```\npackage main\n\nimport (\n    \"io/ioutil\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    d1 := []byte(\"hello\\ngo\\n\")\n    err := ioutil.WriteFile(\"test.txt\", d1, 0644)\n    check(err)\n}\n```\n\n### 使用os进行读写文件\n同样，先回忆下之前的os包的介绍： \nGo语言学习之os包中文件相关的操作(The way to go)\n\n首先要注意的就是两个打开文件的方法： \nfunc Open\n\n`func Open(name string) (*File, error)`\n\nOpen opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.\n\n读文件：\n```\nfile, err := os.Open(path)\nif err != nil {\n    panic(err)\n}\ndefer file.Close()\n```\n\nfunc OpenFile \n需要提供文件路径、打开模式、文件权限\n\n`func OpenFile(name string, flag int, perm FileMode) (*File, error)`\n\nOpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.\n\n读文件：\n```\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    f, err := os.OpenFile(\"notes.txt\", os.O_RDWR|os.O_CREATE, 0755)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if err := f.Close(); err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n读方法\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Open(\"/tmp/dat\")\n    check(err)\n\n    b1 := make([]byte, 5)\n    n1, err := f.Read(b1)\n    \n    check(err)\n    fmt.Printf(\"%d bytes: %s\\n\", n1, string(b1))\n\n    o2, err := f.Seek(6, 0)\n    //n1, err := f.ReadAt(b1,offset)\n    check(err)\n    b2 := make([]byte, 2)\n    n2, err := f.Read(b2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n2, o2, string(b2))\n\n    o3, err := f.Seek(6, 0)\n    check(err)\n    b3 := make([]byte, 2)\n    n3, err := io.ReadAtLeast(f, b3, 2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n3, o3, string(b3))\n\n    _, err = f.Seek(0, 0)\n    check(err)\n\n    r4 := bufio.NewReader(f)\n    b4, err := r4.Peek(5)\n    check(err)\n    fmt.Printf(\"5 bytes: %s\\n\", string(b4))\n\n    f.Close()\n\n}\n```\n> 寻址取偏移量：`func (f *File) Seek(offset int64, whence int) (ret int64, err error)` \n> // Seek sets the offset for the next Read or Write on file to offset,interpreted\n> // according to whence: 0 means relative to the origin of the file, 1 means\n> // relative to the current offset, and 2 means relative to the end.\n> // It returns the new offset and an error, if any.\n> // The behavior of Seek on a file opened with O_APPEND is not specified.\n\n\n写方法\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Create(\"/tmp/dat2\")\n    check(err)\n\n    defer f.Close()\n\n    d2 := []byte{115, 111, 109, 101, 10}\n    n2, err := f.Write(d2)\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n2)\n\n    n3, err := f.WriteString(\"writes\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n3)\n    f.Sync()\n    w := bufio.NewWriter(f)\n    n4, err := w.WriteString(\"buffered\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n4)\n\n    w.Flush()\n\n}\n```\n\n几种读取文件方法速度比较\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n    \"time\"\n)\n\nfunc read0(path string) string {\n    f, err := ioutil.ReadFile(path)//底层调用file.read(fileSizeBuf)\n    if err != nil {\n        fmt.Printf(\"%s\\n\", err)\n        panic(err)\n    }\n    return string(f)\n}\n\nfunc read1(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n\n    chunks := make([]byte, 1024, 1024)\n    buf := make([]byte, 1024)\n    for {\n        n, err := fi.Read(buf)//\b一块一块读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read2(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    r := bufio.NewReader(fi)\n\n    chunks := make([]byte, 1024, 1024)\n\n    buf := make([]byte, 1024)\n    for {\n        n, err := r.Read(buf)//缓存读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read3(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    fd, err := ioutil.ReadAll(fi)//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)\n    return string(fd)\n}\n\nfunc main() {\n\n    file := \"test.log\"\n\n    start := time.Now()\n\n    read0(file)\n    t0 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t0.Sub(start))\n\n    read1(file)\n    t1 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t1.Sub(t0))\n\n    read2(file)\n    t2 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t2.Sub(t1))\n\n    read3(file)\n    t3 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t3.Sub(t2))\n\n}\n```\n\n运行结果： \n```\nCost time 4.0105ms \nCost time 11.5043ms \nCost time 7.0042ms \nCost time 2.4983ms\n```\n# 读写分析\n### 底层IO\n~~~\nfile=open(path)\nfile.read(buf)\nfile.write(buf)\nfile.readAt(buf,offset)\nfile.writeAt(buf,offset)\n~~~\n\n### 缓冲IO\n~~~\nbufio.Reader/Writer\nfile=open(path)\nbufFile=bufio.NewReader(file)\nbufFile.read(buf)\n\nfile=open(path)\nbufFile = bufio.NewWriter(file)\nbufFile.Write([]byte(\"haha\"))\nw.Flush()//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！\n~~~\n>  标准IO操作数据流向路径：数据—>进程缓冲（用户态）—>内核缓存区（内核态）—>磁盘\n> 为什么包一层buf，buf读的时候读一大块，给你读取的时候，你只需要从buf里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况\n> \n\n#### 任务\n1.  给10G的文件排序？\n\n","source":"_posts/stack/golang/go-文件io.md","raw":"---\ntitle: go-文件io\ndate: 2018-09-19 10:47:35\ncategories: \n- go\ntags:\n- go\n---\n# golang 文件读写\n\n### 使用io/ioutil进行读写文件\n先回忆下之前的ioutil包介绍： \nGo语言学习之ioutil包(The way to go)\n\n其中提到了两个方法： \nfunc ReadFile\n\n`func ReadFile(filename string) ([]byte, error)`\n\nReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.\n\nfunc WriteFile\n\n\n`func WriteFile(filename string, data []byte, perm os.FileMode) error`\nWriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.\n\n读文件：\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n    b, err := ioutil.ReadFile(\"test.log\")\n    if err != nil {\n        fmt.Print(err)\n    }\n    fmt.Println(b)\n    str := string(b)\n    fmt.Println(str)\n}\n```\n\n写文件：\n```\npackage main\n\nimport (\n    \"io/ioutil\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    d1 := []byte(\"hello\\ngo\\n\")\n    err := ioutil.WriteFile(\"test.txt\", d1, 0644)\n    check(err)\n}\n```\n\n### 使用os进行读写文件\n同样，先回忆下之前的os包的介绍： \nGo语言学习之os包中文件相关的操作(The way to go)\n\n首先要注意的就是两个打开文件的方法： \nfunc Open\n\n`func Open(name string) (*File, error)`\n\nOpen opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.\n\n读文件：\n```\nfile, err := os.Open(path)\nif err != nil {\n    panic(err)\n}\ndefer file.Close()\n```\n\nfunc OpenFile \n需要提供文件路径、打开模式、文件权限\n\n`func OpenFile(name string, flag int, perm FileMode) (*File, error)`\n\nOpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.\n\n读文件：\n```\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    f, err := os.OpenFile(\"notes.txt\", os.O_RDWR|os.O_CREATE, 0755)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if err := f.Close(); err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n读方法\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Open(\"/tmp/dat\")\n    check(err)\n\n    b1 := make([]byte, 5)\n    n1, err := f.Read(b1)\n    \n    check(err)\n    fmt.Printf(\"%d bytes: %s\\n\", n1, string(b1))\n\n    o2, err := f.Seek(6, 0)\n    //n1, err := f.ReadAt(b1,offset)\n    check(err)\n    b2 := make([]byte, 2)\n    n2, err := f.Read(b2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n2, o2, string(b2))\n\n    o3, err := f.Seek(6, 0)\n    check(err)\n    b3 := make([]byte, 2)\n    n3, err := io.ReadAtLeast(f, b3, 2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n3, o3, string(b3))\n\n    _, err = f.Seek(0, 0)\n    check(err)\n\n    r4 := bufio.NewReader(f)\n    b4, err := r4.Peek(5)\n    check(err)\n    fmt.Printf(\"5 bytes: %s\\n\", string(b4))\n\n    f.Close()\n\n}\n```\n> 寻址取偏移量：`func (f *File) Seek(offset int64, whence int) (ret int64, err error)` \n> // Seek sets the offset for the next Read or Write on file to offset,interpreted\n> // according to whence: 0 means relative to the origin of the file, 1 means\n> // relative to the current offset, and 2 means relative to the end.\n> // It returns the new offset and an error, if any.\n> // The behavior of Seek on a file opened with O_APPEND is not specified.\n\n\n写方法\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Create(\"/tmp/dat2\")\n    check(err)\n\n    defer f.Close()\n\n    d2 := []byte{115, 111, 109, 101, 10}\n    n2, err := f.Write(d2)\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n2)\n\n    n3, err := f.WriteString(\"writes\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n3)\n    f.Sync()\n    w := bufio.NewWriter(f)\n    n4, err := w.WriteString(\"buffered\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n4)\n\n    w.Flush()\n\n}\n```\n\n几种读取文件方法速度比较\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n    \"time\"\n)\n\nfunc read0(path string) string {\n    f, err := ioutil.ReadFile(path)//底层调用file.read(fileSizeBuf)\n    if err != nil {\n        fmt.Printf(\"%s\\n\", err)\n        panic(err)\n    }\n    return string(f)\n}\n\nfunc read1(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n\n    chunks := make([]byte, 1024, 1024)\n    buf := make([]byte, 1024)\n    for {\n        n, err := fi.Read(buf)//\b一块一块读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read2(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    r := bufio.NewReader(fi)\n\n    chunks := make([]byte, 1024, 1024)\n\n    buf := make([]byte, 1024)\n    for {\n        n, err := r.Read(buf)//缓存读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read3(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    fd, err := ioutil.ReadAll(fi)//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)\n    return string(fd)\n}\n\nfunc main() {\n\n    file := \"test.log\"\n\n    start := time.Now()\n\n    read0(file)\n    t0 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t0.Sub(start))\n\n    read1(file)\n    t1 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t1.Sub(t0))\n\n    read2(file)\n    t2 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t2.Sub(t1))\n\n    read3(file)\n    t3 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t3.Sub(t2))\n\n}\n```\n\n运行结果： \n```\nCost time 4.0105ms \nCost time 11.5043ms \nCost time 7.0042ms \nCost time 2.4983ms\n```\n# 读写分析\n### 底层IO\n~~~\nfile=open(path)\nfile.read(buf)\nfile.write(buf)\nfile.readAt(buf,offset)\nfile.writeAt(buf,offset)\n~~~\n\n### 缓冲IO\n~~~\nbufio.Reader/Writer\nfile=open(path)\nbufFile=bufio.NewReader(file)\nbufFile.read(buf)\n\nfile=open(path)\nbufFile = bufio.NewWriter(file)\nbufFile.Write([]byte(\"haha\"))\nw.Flush()//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！\n~~~\n>  标准IO操作数据流向路径：数据—>进程缓冲（用户态）—>内核缓存区（内核态）—>磁盘\n> 为什么包一层buf，buf读的时候读一大块，给你读取的时候，你只需要从buf里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况\n> \n\n#### 任务\n1.  给10G的文件排序？\n\n","slug":"stack/golang/go-文件io","published":1,"updated":"2018-09-21T04:20:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4li001nlls6oyym7a2v","content":"<h1 id=\"golang-文件读写\"><a href=\"#golang-文件读写\" class=\"headerlink\" title=\"golang 文件读写\"></a>golang 文件读写</h1><h3 id=\"使用io-ioutil进行读写文件\"><a href=\"#使用io-ioutil进行读写文件\" class=\"headerlink\" title=\"使用io/ioutil进行读写文件\"></a>使用io/ioutil进行读写文件</h3><p>先回忆下之前的ioutil包介绍：<br>Go语言学习之ioutil包(The way to go)</p>\n<p>其中提到了两个方法：<br>func ReadFile</p>\n<p><code>func ReadFile(filename string) ([]byte, error)</code></p>\n<p>ReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.</p>\n<p>func WriteFile</p>\n<p><code>func WriteFile(filename string, data []byte, perm os.FileMode) error</code><br>WriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    b, err := ioutil.ReadFile(&quot;test.log&quot;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Print(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">    str := string(b)</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>写文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    d1 := []byte(&quot;hello\\ngo\\n&quot;)</span><br><span class=\"line\">    err := ioutil.WriteFile(&quot;test.txt&quot;, d1, 0644)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用os进行读写文件\"><a href=\"#使用os进行读写文件\" class=\"headerlink\" title=\"使用os进行读写文件\"></a>使用os进行读写文件</h3><p>同样，先回忆下之前的os包的介绍：<br>Go语言学习之os包中文件相关的操作(The way to go)</p>\n<p>首先要注意的就是两个打开文件的方法：<br>func Open</p>\n<p><code>func Open(name string) (*File, error)</code></p>\n<p>Open opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file, err := os.Open(path)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    panic(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">defer file.Close()</span><br></pre></td></tr></table></figure></p>\n<p>func OpenFile<br>需要提供文件路径、打开模式、文件权限</p>\n<p><code>func OpenFile(name string, flag int, perm FileMode) (*File, error)</code></p>\n<p>OpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;log&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    f, err := os.OpenFile(&quot;notes.txt&quot;, os.O_RDWR|os.O_CREATE, 0755)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if err := f.Close(); err != nil &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>读方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Open(&quot;/tmp/dat&quot;)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    b1 := make([]byte, 5)</span><br><span class=\"line\">    n1, err := f.Read(b1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes: %s\\n&quot;, n1, string(b1))</span><br><span class=\"line\"></span><br><span class=\"line\">    o2, err := f.Seek(6, 0)</span><br><span class=\"line\">    //n1, err := f.ReadAt(b1,offset)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b2 := make([]byte, 2)</span><br><span class=\"line\">    n2, err := f.Read(b2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes @ %d: %s\\n&quot;, n2, o2, string(b2))</span><br><span class=\"line\"></span><br><span class=\"line\">    o3, err := f.Seek(6, 0)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b3 := make([]byte, 2)</span><br><span class=\"line\">    n3, err := io.ReadAtLeast(f, b3, 2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes @ %d: %s\\n&quot;, n3, o3, string(b3))</span><br><span class=\"line\"></span><br><span class=\"line\">    _, err = f.Seek(0, 0)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    r4 := bufio.NewReader(f)</span><br><span class=\"line\">    b4, err := r4.Peek(5)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;5 bytes: %s\\n&quot;, string(b4))</span><br><span class=\"line\"></span><br><span class=\"line\">    f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>寻址取偏移量：<code>func (f *File) Seek(offset int64, whence int) (ret int64, err error)</code><br>// Seek sets the offset for the next Read or Write on file to offset,interpreted<br>// according to whence: 0 means relative to the origin of the file, 1 means<br>// relative to the current offset, and 2 means relative to the end.<br>// It returns the new offset and an error, if any.<br>// The behavior of Seek on a file opened with O_APPEND is not specified.</p>\n</blockquote>\n<p>写方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Create(&quot;/tmp/dat2&quot;)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    defer f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    d2 := []byte&#123;115, 111, 109, 101, 10&#125;</span><br><span class=\"line\">    n2, err := f.Write(d2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n2)</span><br><span class=\"line\"></span><br><span class=\"line\">    n3, err := f.WriteString(&quot;writes\\n&quot;)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n3)</span><br><span class=\"line\">    f.Sync()</span><br><span class=\"line\">    w := bufio.NewWriter(f)</span><br><span class=\"line\">    n4, err := w.WriteString(&quot;buffered\\n&quot;)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n4)</span><br><span class=\"line\"></span><br><span class=\"line\">    w.Flush()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>几种读取文件方法速度比较<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func read0(path string) string &#123;</span><br><span class=\"line\">    f, err := ioutil.ReadFile(path)//底层调用file.read(fileSizeBuf)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;%s\\n&quot;, err)</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read1(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := make([]byte, 1024, 1024)</span><br><span class=\"line\">    buf := make([]byte, 1024)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        n, err := fi.Read(buf)//\b一块一块读</span><br><span class=\"line\">        if err != nil &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if 0 == n &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = append(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read2(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\">    r := bufio.NewReader(fi)</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := make([]byte, 1024, 1024)</span><br><span class=\"line\"></span><br><span class=\"line\">    buf := make([]byte, 1024)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        n, err := r.Read(buf)//缓存读</span><br><span class=\"line\">        if err != nil &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if 0 == n &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = append(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read3(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\">    fd, err := ioutil.ReadAll(fi)//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)</span><br><span class=\"line\">    return string(fd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    file := &quot;test.log&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    start := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">    read0(file)</span><br><span class=\"line\">    t0 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t0.Sub(start))</span><br><span class=\"line\"></span><br><span class=\"line\">    read1(file)</span><br><span class=\"line\">    t1 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t1.Sub(t0))</span><br><span class=\"line\"></span><br><span class=\"line\">    read2(file)</span><br><span class=\"line\">    t2 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t2.Sub(t1))</span><br><span class=\"line\"></span><br><span class=\"line\">    read3(file)</span><br><span class=\"line\">    t3 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t3.Sub(t2))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cost time 4.0105ms </span><br><span class=\"line\">Cost time 11.5043ms </span><br><span class=\"line\">Cost time 7.0042ms </span><br><span class=\"line\">Cost time 2.4983ms</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"读写分析\"><a href=\"#读写分析\" class=\"headerlink\" title=\"读写分析\"></a>读写分析</h1><h3 id=\"底层IO\"><a href=\"#底层IO\" class=\"headerlink\" title=\"底层IO\"></a>底层IO</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file=open(path)</span><br><span class=\"line\">file.read(buf)</span><br><span class=\"line\">file.write(buf)</span><br><span class=\"line\">file.readAt(buf,offset)</span><br><span class=\"line\">file.writeAt(buf,offset)</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓冲IO\"><a href=\"#缓冲IO\" class=\"headerlink\" title=\"缓冲IO\"></a>缓冲IO</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bufio.Reader/Writer</span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile=bufio.NewReader(file)</span><br><span class=\"line\">bufFile.read(buf)</span><br><span class=\"line\"></span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile = bufio.NewWriter(file)</span><br><span class=\"line\">bufFile.Write([]byte(&quot;haha&quot;))</span><br><span class=\"line\">w.Flush()//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 标准IO操作数据流向路径：数据—&gt;进程缓冲（用户态）—&gt;内核缓存区（内核态）—&gt;磁盘<br>为什么包一层buf，buf读的时候读一大块，给你读取的时候，你只需要从buf里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况</p>\n</blockquote>\n<h4 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h4><ol>\n<li>给10G的文件排序？</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"golang-文件读写\"><a href=\"#golang-文件读写\" class=\"headerlink\" title=\"golang 文件读写\"></a>golang 文件读写</h1><h3 id=\"使用io-ioutil进行读写文件\"><a href=\"#使用io-ioutil进行读写文件\" class=\"headerlink\" title=\"使用io/ioutil进行读写文件\"></a>使用io/ioutil进行读写文件</h3><p>先回忆下之前的ioutil包介绍：<br>Go语言学习之ioutil包(The way to go)</p>\n<p>其中提到了两个方法：<br>func ReadFile</p>\n<p><code>func ReadFile(filename string) ([]byte, error)</code></p>\n<p>ReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.</p>\n<p>func WriteFile</p>\n<p><code>func WriteFile(filename string, data []byte, perm os.FileMode) error</code><br>WriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    b, err := ioutil.ReadFile(&quot;test.log&quot;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Print(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">    str := string(b)</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>写文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    d1 := []byte(&quot;hello\\ngo\\n&quot;)</span><br><span class=\"line\">    err := ioutil.WriteFile(&quot;test.txt&quot;, d1, 0644)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用os进行读写文件\"><a href=\"#使用os进行读写文件\" class=\"headerlink\" title=\"使用os进行读写文件\"></a>使用os进行读写文件</h3><p>同样，先回忆下之前的os包的介绍：<br>Go语言学习之os包中文件相关的操作(The way to go)</p>\n<p>首先要注意的就是两个打开文件的方法：<br>func Open</p>\n<p><code>func Open(name string) (*File, error)</code></p>\n<p>Open opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file, err := os.Open(path)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    panic(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">defer file.Close()</span><br></pre></td></tr></table></figure></p>\n<p>func OpenFile<br>需要提供文件路径、打开模式、文件权限</p>\n<p><code>func OpenFile(name string, flag int, perm FileMode) (*File, error)</code></p>\n<p>OpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;log&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    f, err := os.OpenFile(&quot;notes.txt&quot;, os.O_RDWR|os.O_CREATE, 0755)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if err := f.Close(); err != nil &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>读方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Open(&quot;/tmp/dat&quot;)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    b1 := make([]byte, 5)</span><br><span class=\"line\">    n1, err := f.Read(b1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes: %s\\n&quot;, n1, string(b1))</span><br><span class=\"line\"></span><br><span class=\"line\">    o2, err := f.Seek(6, 0)</span><br><span class=\"line\">    //n1, err := f.ReadAt(b1,offset)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b2 := make([]byte, 2)</span><br><span class=\"line\">    n2, err := f.Read(b2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes @ %d: %s\\n&quot;, n2, o2, string(b2))</span><br><span class=\"line\"></span><br><span class=\"line\">    o3, err := f.Seek(6, 0)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b3 := make([]byte, 2)</span><br><span class=\"line\">    n3, err := io.ReadAtLeast(f, b3, 2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes @ %d: %s\\n&quot;, n3, o3, string(b3))</span><br><span class=\"line\"></span><br><span class=\"line\">    _, err = f.Seek(0, 0)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    r4 := bufio.NewReader(f)</span><br><span class=\"line\">    b4, err := r4.Peek(5)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;5 bytes: %s\\n&quot;, string(b4))</span><br><span class=\"line\"></span><br><span class=\"line\">    f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>寻址取偏移量：<code>func (f *File) Seek(offset int64, whence int) (ret int64, err error)</code><br>// Seek sets the offset for the next Read or Write on file to offset,interpreted<br>// according to whence: 0 means relative to the origin of the file, 1 means<br>// relative to the current offset, and 2 means relative to the end.<br>// It returns the new offset and an error, if any.<br>// The behavior of Seek on a file opened with O_APPEND is not specified.</p>\n</blockquote>\n<p>写方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Create(&quot;/tmp/dat2&quot;)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    defer f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    d2 := []byte&#123;115, 111, 109, 101, 10&#125;</span><br><span class=\"line\">    n2, err := f.Write(d2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n2)</span><br><span class=\"line\"></span><br><span class=\"line\">    n3, err := f.WriteString(&quot;writes\\n&quot;)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n3)</span><br><span class=\"line\">    f.Sync()</span><br><span class=\"line\">    w := bufio.NewWriter(f)</span><br><span class=\"line\">    n4, err := w.WriteString(&quot;buffered\\n&quot;)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n4)</span><br><span class=\"line\"></span><br><span class=\"line\">    w.Flush()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>几种读取文件方法速度比较<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func read0(path string) string &#123;</span><br><span class=\"line\">    f, err := ioutil.ReadFile(path)//底层调用file.read(fileSizeBuf)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;%s\\n&quot;, err)</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read1(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := make([]byte, 1024, 1024)</span><br><span class=\"line\">    buf := make([]byte, 1024)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        n, err := fi.Read(buf)//\b一块一块读</span><br><span class=\"line\">        if err != nil &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if 0 == n &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = append(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read2(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\">    r := bufio.NewReader(fi)</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := make([]byte, 1024, 1024)</span><br><span class=\"line\"></span><br><span class=\"line\">    buf := make([]byte, 1024)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        n, err := r.Read(buf)//缓存读</span><br><span class=\"line\">        if err != nil &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if 0 == n &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = append(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read3(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\">    fd, err := ioutil.ReadAll(fi)//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)</span><br><span class=\"line\">    return string(fd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    file := &quot;test.log&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    start := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">    read0(file)</span><br><span class=\"line\">    t0 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t0.Sub(start))</span><br><span class=\"line\"></span><br><span class=\"line\">    read1(file)</span><br><span class=\"line\">    t1 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t1.Sub(t0))</span><br><span class=\"line\"></span><br><span class=\"line\">    read2(file)</span><br><span class=\"line\">    t2 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t2.Sub(t1))</span><br><span class=\"line\"></span><br><span class=\"line\">    read3(file)</span><br><span class=\"line\">    t3 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t3.Sub(t2))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cost time 4.0105ms </span><br><span class=\"line\">Cost time 11.5043ms </span><br><span class=\"line\">Cost time 7.0042ms </span><br><span class=\"line\">Cost time 2.4983ms</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"读写分析\"><a href=\"#读写分析\" class=\"headerlink\" title=\"读写分析\"></a>读写分析</h1><h3 id=\"底层IO\"><a href=\"#底层IO\" class=\"headerlink\" title=\"底层IO\"></a>底层IO</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file=open(path)</span><br><span class=\"line\">file.read(buf)</span><br><span class=\"line\">file.write(buf)</span><br><span class=\"line\">file.readAt(buf,offset)</span><br><span class=\"line\">file.writeAt(buf,offset)</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓冲IO\"><a href=\"#缓冲IO\" class=\"headerlink\" title=\"缓冲IO\"></a>缓冲IO</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bufio.Reader/Writer</span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile=bufio.NewReader(file)</span><br><span class=\"line\">bufFile.read(buf)</span><br><span class=\"line\"></span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile = bufio.NewWriter(file)</span><br><span class=\"line\">bufFile.Write([]byte(&quot;haha&quot;))</span><br><span class=\"line\">w.Flush()//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 标准IO操作数据流向路径：数据—&gt;进程缓冲（用户态）—&gt;内核缓存区（内核态）—&gt;磁盘<br>为什么包一层buf，buf读的时候读一大块，给你读取的时候，你只需要从buf里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况</p>\n</blockquote>\n<h4 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h4><ol>\n<li>给10G的文件排序？</li>\n</ol>\n"},{"title":"go协程调度","date":"2018-09-19T02:34:08.000Z","_content":"\n### go协程调度\n\n### 核心图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvenffzk2mj20lu0izq74.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvenfxq3kpj20io0ao0w1.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fv6vtv5mjxj20fa0b4myk.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fv6vuds7fjj20zk0mxdgx.jpg)\n### G-P-M 模型调度\nGo调度器工作时会维护两种用来保存G的任务队列：一种是一个Global任务队列，一种是每个P维护的Local任务队列。\n\n当通过go关键字创建一个新的goroutine的时候，它会优先被放入P的本地队列。为了运行goroutine，M需要持有（绑定）一个P，接着M会启动一个OS线程，循环从P的本地队列里取出一个goroutine并执行。当然还有上文提及的 work-stealing调度算法：当M执行完了当前P的Local队列里的所有G后，P也不会就这么在那躺尸啥都不干，它会先尝试从Global队列寻找G来执行，如果Global队列为空，它会随机挑选另外一个P，从它的队列里中拿走一半的G到自己的队列中执行。\n\n如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析goroutine在两种例外情况下的行为。\n\nGo runtime会在下面的goroutine被阻塞的情况下运行另外一个goroutine：\n\n- blocking syscall (for example opening a file)\n- network input\n- channel operations\n- primitives in the sync package\n这四种场景又可归类为两种类型：\n\n### 用户态阻塞/唤醒\n当goroutine因为channel操作或者network I/O而阻塞时（实际上golang已经用netpoller实现了goroutine网络I/O阻塞不会导致M被阻塞，仅阻塞G，这里仅仅是举个栗子），对应的G会被放置到某个wait队列(如channel的waitq)，该G的状态由_Gruning变为_Gwaitting，而M会跳过该G尝试获取并执行下一个G，如果此时没有runnable的G供M运行，那么M将解绑P，并进入sleep状态；当阻塞的G被另一端的G2唤醒时（比如channel的可读/写通知），G被标记为runnable，尝试加入G2所在P的runnext，然后再是P的Local队列和Global队列。\n\n### 系统调用阻塞\n当G被阻塞在某个系统调用上时，此时G会阻塞在_Gsyscall状态，M也处于 block on syscall 状态，此时的M可被抢占调度（可以抢占其他M）：执行该G的M会与P解绑，而P则尝试与其它idle的M绑定，继续执行其它G。如果没有其它idle的M，但P的Local队列中仍然有G需要执行，则创建一个新的M；当系统调用完成后，G会重新尝试获取一个idle的P进入它的Local队列恢复执行，如果没有idle的P，G会被标记为runnable加入到Global队列。（全局队列用武之地）\n\n以上就是从宏观的角度对Goroutine和它的调度器进行的一些概要性的介绍，当然，Go的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到Go调度器的基本调度过程，为后面自己实现一个Goroutine Pool提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚Go调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看Go调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M模型的定义放在src/runtime/runtime2.go里面，而调度过程则放在了src/runtime/proc.go里。\n\n\n### 问题？\n#### 0.go协程阻塞时如何进行调度？\n> 在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。\n> Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。\n> 1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当MO返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context过来，如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行。\n> 2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。\n\n\n\n\n#### 1.go为什么要实现自己的协程调度，而不用系统调度？\n> 1.线程较多时，开销较大。\n> 2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。\n\n#### 2.GM为啥不行？P有什么作用？\n> 1.每个 P 都有一个队列，用来存正在执行的 G。避免 Global Sched Lock。\n> 2.每个 M 运行都需要一个 MCache 结构。M Pool 中通常有较多 M，但执行的只有几个，为每个池子中的每个 M 分配一个 MCache 则会形成不必要的浪费，通过把 cache 从 M 移到 P，每个运行的 M 都有关联的 P，这样只有运行的 M 才有自己的 MCache。\n\n#### 3.Goroutine vs OS thread 有什么区别？\n> 其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。\n\n\n#### 4.sysmon功能是什么？\n\n>释放闲置超过5分钟的span物理内存；\n>如果超过2分钟没有垃圾回收，强制执行；\n>将长时间未处理的netpoll结果添加到任务队列；\n>向长时间运行的G任务发出抢占调度；\n>收回因syscall长时间阻塞的P；","source":"_posts/stack/golang/go协程调度.md","raw":"---\ntitle: go协程调度\ndate: 2018-09-19 10:34:08\ntags:\n- go\ncategories: \n- go\n---\n\n### go协程调度\n\n### 核心图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvenffzk2mj20lu0izq74.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvenfxq3kpj20io0ao0w1.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fv6vtv5mjxj20fa0b4myk.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fv6vuds7fjj20zk0mxdgx.jpg)\n### G-P-M 模型调度\nGo调度器工作时会维护两种用来保存G的任务队列：一种是一个Global任务队列，一种是每个P维护的Local任务队列。\n\n当通过go关键字创建一个新的goroutine的时候，它会优先被放入P的本地队列。为了运行goroutine，M需要持有（绑定）一个P，接着M会启动一个OS线程，循环从P的本地队列里取出一个goroutine并执行。当然还有上文提及的 work-stealing调度算法：当M执行完了当前P的Local队列里的所有G后，P也不会就这么在那躺尸啥都不干，它会先尝试从Global队列寻找G来执行，如果Global队列为空，它会随机挑选另外一个P，从它的队列里中拿走一半的G到自己的队列中执行。\n\n如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析goroutine在两种例外情况下的行为。\n\nGo runtime会在下面的goroutine被阻塞的情况下运行另外一个goroutine：\n\n- blocking syscall (for example opening a file)\n- network input\n- channel operations\n- primitives in the sync package\n这四种场景又可归类为两种类型：\n\n### 用户态阻塞/唤醒\n当goroutine因为channel操作或者network I/O而阻塞时（实际上golang已经用netpoller实现了goroutine网络I/O阻塞不会导致M被阻塞，仅阻塞G，这里仅仅是举个栗子），对应的G会被放置到某个wait队列(如channel的waitq)，该G的状态由_Gruning变为_Gwaitting，而M会跳过该G尝试获取并执行下一个G，如果此时没有runnable的G供M运行，那么M将解绑P，并进入sleep状态；当阻塞的G被另一端的G2唤醒时（比如channel的可读/写通知），G被标记为runnable，尝试加入G2所在P的runnext，然后再是P的Local队列和Global队列。\n\n### 系统调用阻塞\n当G被阻塞在某个系统调用上时，此时G会阻塞在_Gsyscall状态，M也处于 block on syscall 状态，此时的M可被抢占调度（可以抢占其他M）：执行该G的M会与P解绑，而P则尝试与其它idle的M绑定，继续执行其它G。如果没有其它idle的M，但P的Local队列中仍然有G需要执行，则创建一个新的M；当系统调用完成后，G会重新尝试获取一个idle的P进入它的Local队列恢复执行，如果没有idle的P，G会被标记为runnable加入到Global队列。（全局队列用武之地）\n\n以上就是从宏观的角度对Goroutine和它的调度器进行的一些概要性的介绍，当然，Go的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到Go调度器的基本调度过程，为后面自己实现一个Goroutine Pool提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚Go调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看Go调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M模型的定义放在src/runtime/runtime2.go里面，而调度过程则放在了src/runtime/proc.go里。\n\n\n### 问题？\n#### 0.go协程阻塞时如何进行调度？\n> 在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。\n> Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。\n> 1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当MO返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context过来，如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行。\n> 2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。\n\n\n\n\n#### 1.go为什么要实现自己的协程调度，而不用系统调度？\n> 1.线程较多时，开销较大。\n> 2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。\n\n#### 2.GM为啥不行？P有什么作用？\n> 1.每个 P 都有一个队列，用来存正在执行的 G。避免 Global Sched Lock。\n> 2.每个 M 运行都需要一个 MCache 结构。M Pool 中通常有较多 M，但执行的只有几个，为每个池子中的每个 M 分配一个 MCache 则会形成不必要的浪费，通过把 cache 从 M 移到 P，每个运行的 M 都有关联的 P，这样只有运行的 M 才有自己的 MCache。\n\n#### 3.Goroutine vs OS thread 有什么区别？\n> 其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。\n\n\n#### 4.sysmon功能是什么？\n\n>释放闲置超过5分钟的span物理内存；\n>如果超过2分钟没有垃圾回收，强制执行；\n>将长时间未处理的netpoll结果添加到任务队列；\n>向长时间运行的G任务发出抢占调度；\n>收回因syscall长时间阻塞的P；","slug":"stack/golang/go协程调度","published":1,"updated":"2018-09-19T08:06:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo5eg4lk001olls6b99ucu5n","content":"<h3 id=\"go协程调度\"><a href=\"#go协程调度\" class=\"headerlink\" title=\"go协程调度\"></a>go协程调度</h3><h3 id=\"核心图\"><a href=\"#核心图\" class=\"headerlink\" title=\"核心图\"></a>核心图</h3><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvenffzk2mj20lu0izq74.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvenfxq3kpj20io0ao0w1.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fv6vtv5mjxj20fa0b4myk.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fv6vuds7fjj20zk0mxdgx.jpg\" alt=\"\"></p>\n<h3 id=\"G-P-M-模型调度\"><a href=\"#G-P-M-模型调度\" class=\"headerlink\" title=\"G-P-M 模型调度\"></a>G-P-M 模型调度</h3><p>Go调度器工作时会维护两种用来保存G的任务队列：一种是一个Global任务队列，一种是每个P维护的Local任务队列。</p>\n<p>当通过go关键字创建一个新的goroutine的时候，它会优先被放入P的本地队列。为了运行goroutine，M需要持有（绑定）一个P，接着M会启动一个OS线程，循环从P的本地队列里取出一个goroutine并执行。当然还有上文提及的 work-stealing调度算法：当M执行完了当前P的Local队列里的所有G后，P也不会就这么在那躺尸啥都不干，它会先尝试从Global队列寻找G来执行，如果Global队列为空，它会随机挑选另外一个P，从它的队列里中拿走一半的G到自己的队列中执行。</p>\n<p>如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析goroutine在两种例外情况下的行为。</p>\n<p>Go runtime会在下面的goroutine被阻塞的情况下运行另外一个goroutine：</p>\n<ul>\n<li>blocking syscall (for example opening a file)</li>\n<li>network input</li>\n<li>channel operations</li>\n<li>primitives in the sync package<br>这四种场景又可归类为两种类型：</li>\n</ul>\n<h3 id=\"用户态阻塞-唤醒\"><a href=\"#用户态阻塞-唤醒\" class=\"headerlink\" title=\"用户态阻塞/唤醒\"></a>用户态阻塞/唤醒</h3><p>当goroutine因为channel操作或者network I/O而阻塞时（实际上golang已经用netpoller实现了goroutine网络I/O阻塞不会导致M被阻塞，仅阻塞G，这里仅仅是举个栗子），对应的G会被放置到某个wait队列(如channel的waitq)，该G的状态由_Gruning变为_Gwaitting，而M会跳过该G尝试获取并执行下一个G，如果此时没有runnable的G供M运行，那么M将解绑P，并进入sleep状态；当阻塞的G被另一端的G2唤醒时（比如channel的可读/写通知），G被标记为runnable，尝试加入G2所在P的runnext，然后再是P的Local队列和Global队列。</p>\n<h3 id=\"系统调用阻塞\"><a href=\"#系统调用阻塞\" class=\"headerlink\" title=\"系统调用阻塞\"></a>系统调用阻塞</h3><p>当G被阻塞在某个系统调用上时，此时G会阻塞在_Gsyscall状态，M也处于 block on syscall 状态，此时的M可被抢占调度（可以抢占其他M）：执行该G的M会与P解绑，而P则尝试与其它idle的M绑定，继续执行其它G。如果没有其它idle的M，但P的Local队列中仍然有G需要执行，则创建一个新的M；当系统调用完成后，G会重新尝试获取一个idle的P进入它的Local队列恢复执行，如果没有idle的P，G会被标记为runnable加入到Global队列。（全局队列用武之地）</p>\n<p>以上就是从宏观的角度对Goroutine和它的调度器进行的一些概要性的介绍，当然，Go的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到Go调度器的基本调度过程，为后面自己实现一个Goroutine Pool提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚Go调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看Go调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M模型的定义放在src/runtime/runtime2.go里面，而调度过程则放在了src/runtime/proc.go里。</p>\n<h3 id=\"问题？\"><a href=\"#问题？\" class=\"headerlink\" title=\"问题？\"></a>问题？</h3><h4 id=\"0-go协程阻塞时如何进行调度？\"><a href=\"#0-go协程阻塞时如何进行调度？\" class=\"headerlink\" title=\"0.go协程阻塞时如何进行调度？\"></a>0.go协程阻塞时如何进行调度？</h4><blockquote>\n<p>在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。<br>Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。<br>1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当MO返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context过来，如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行。<br>2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。</p>\n</blockquote>\n<h4 id=\"1-go为什么要实现自己的协程调度，而不用系统调度？\"><a href=\"#1-go为什么要实现自己的协程调度，而不用系统调度？\" class=\"headerlink\" title=\"1.go为什么要实现自己的协程调度，而不用系统调度？\"></a>1.go为什么要实现自己的协程调度，而不用系统调度？</h4><blockquote>\n<p>1.线程较多时，开销较大。<br>2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。</p>\n</blockquote>\n<h4 id=\"2-GM为啥不行？P有什么作用？\"><a href=\"#2-GM为啥不行？P有什么作用？\" class=\"headerlink\" title=\"2.GM为啥不行？P有什么作用？\"></a>2.GM为啥不行？P有什么作用？</h4><blockquote>\n<p>1.每个 P 都有一个队列，用来存正在执行的 G。避免 Global Sched Lock。<br>2.每个 M 运行都需要一个 MCache 结构。M Pool 中通常有较多 M，但执行的只有几个，为每个池子中的每个 M 分配一个 MCache 则会形成不必要的浪费，通过把 cache 从 M 移到 P，每个运行的 M 都有关联的 P，这样只有运行的 M 才有自己的 MCache。</p>\n</blockquote>\n<h4 id=\"3-Goroutine-vs-OS-thread-有什么区别？\"><a href=\"#3-Goroutine-vs-OS-thread-有什么区别？\" class=\"headerlink\" title=\"3.Goroutine vs OS thread 有什么区别？\"></a>3.Goroutine vs OS thread 有什么区别？</h4><blockquote>\n<p>其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。</p>\n</blockquote>\n<h4 id=\"4-sysmon功能是什么？\"><a href=\"#4-sysmon功能是什么？\" class=\"headerlink\" title=\"4.sysmon功能是什么？\"></a>4.sysmon功能是什么？</h4><blockquote>\n<p>释放闲置超过5分钟的span物理内存；<br>如果超过2分钟没有垃圾回收，强制执行；<br>将长时间未处理的netpoll结果添加到任务队列；<br>向长时间运行的G任务发出抢占调度；<br>收回因syscall长时间阻塞的P；</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"go协程调度\"><a href=\"#go协程调度\" class=\"headerlink\" title=\"go协程调度\"></a>go协程调度</h3><h3 id=\"核心图\"><a href=\"#核心图\" class=\"headerlink\" title=\"核心图\"></a>核心图</h3><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvenffzk2mj20lu0izq74.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvenfxq3kpj20io0ao0w1.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fv6vtv5mjxj20fa0b4myk.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fv6vuds7fjj20zk0mxdgx.jpg\" alt=\"\"></p>\n<h3 id=\"G-P-M-模型调度\"><a href=\"#G-P-M-模型调度\" class=\"headerlink\" title=\"G-P-M 模型调度\"></a>G-P-M 模型调度</h3><p>Go调度器工作时会维护两种用来保存G的任务队列：一种是一个Global任务队列，一种是每个P维护的Local任务队列。</p>\n<p>当通过go关键字创建一个新的goroutine的时候，它会优先被放入P的本地队列。为了运行goroutine，M需要持有（绑定）一个P，接着M会启动一个OS线程，循环从P的本地队列里取出一个goroutine并执行。当然还有上文提及的 work-stealing调度算法：当M执行完了当前P的Local队列里的所有G后，P也不会就这么在那躺尸啥都不干，它会先尝试从Global队列寻找G来执行，如果Global队列为空，它会随机挑选另外一个P，从它的队列里中拿走一半的G到自己的队列中执行。</p>\n<p>如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析goroutine在两种例外情况下的行为。</p>\n<p>Go runtime会在下面的goroutine被阻塞的情况下运行另外一个goroutine：</p>\n<ul>\n<li>blocking syscall (for example opening a file)</li>\n<li>network input</li>\n<li>channel operations</li>\n<li>primitives in the sync package<br>这四种场景又可归类为两种类型：</li>\n</ul>\n<h3 id=\"用户态阻塞-唤醒\"><a href=\"#用户态阻塞-唤醒\" class=\"headerlink\" title=\"用户态阻塞/唤醒\"></a>用户态阻塞/唤醒</h3><p>当goroutine因为channel操作或者network I/O而阻塞时（实际上golang已经用netpoller实现了goroutine网络I/O阻塞不会导致M被阻塞，仅阻塞G，这里仅仅是举个栗子），对应的G会被放置到某个wait队列(如channel的waitq)，该G的状态由_Gruning变为_Gwaitting，而M会跳过该G尝试获取并执行下一个G，如果此时没有runnable的G供M运行，那么M将解绑P，并进入sleep状态；当阻塞的G被另一端的G2唤醒时（比如channel的可读/写通知），G被标记为runnable，尝试加入G2所在P的runnext，然后再是P的Local队列和Global队列。</p>\n<h3 id=\"系统调用阻塞\"><a href=\"#系统调用阻塞\" class=\"headerlink\" title=\"系统调用阻塞\"></a>系统调用阻塞</h3><p>当G被阻塞在某个系统调用上时，此时G会阻塞在_Gsyscall状态，M也处于 block on syscall 状态，此时的M可被抢占调度（可以抢占其他M）：执行该G的M会与P解绑，而P则尝试与其它idle的M绑定，继续执行其它G。如果没有其它idle的M，但P的Local队列中仍然有G需要执行，则创建一个新的M；当系统调用完成后，G会重新尝试获取一个idle的P进入它的Local队列恢复执行，如果没有idle的P，G会被标记为runnable加入到Global队列。（全局队列用武之地）</p>\n<p>以上就是从宏观的角度对Goroutine和它的调度器进行的一些概要性的介绍，当然，Go的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到Go调度器的基本调度过程，为后面自己实现一个Goroutine Pool提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚Go调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看Go调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M模型的定义放在src/runtime/runtime2.go里面，而调度过程则放在了src/runtime/proc.go里。</p>\n<h3 id=\"问题？\"><a href=\"#问题？\" class=\"headerlink\" title=\"问题？\"></a>问题？</h3><h4 id=\"0-go协程阻塞时如何进行调度？\"><a href=\"#0-go协程阻塞时如何进行调度？\" class=\"headerlink\" title=\"0.go协程阻塞时如何进行调度？\"></a>0.go协程阻塞时如何进行调度？</h4><blockquote>\n<p>在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。<br>Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。<br>1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当MO返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context过来，如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行。<br>2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。</p>\n</blockquote>\n<h4 id=\"1-go为什么要实现自己的协程调度，而不用系统调度？\"><a href=\"#1-go为什么要实现自己的协程调度，而不用系统调度？\" class=\"headerlink\" title=\"1.go为什么要实现自己的协程调度，而不用系统调度？\"></a>1.go为什么要实现自己的协程调度，而不用系统调度？</h4><blockquote>\n<p>1.线程较多时，开销较大。<br>2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。</p>\n</blockquote>\n<h4 id=\"2-GM为啥不行？P有什么作用？\"><a href=\"#2-GM为啥不行？P有什么作用？\" class=\"headerlink\" title=\"2.GM为啥不行？P有什么作用？\"></a>2.GM为啥不行？P有什么作用？</h4><blockquote>\n<p>1.每个 P 都有一个队列，用来存正在执行的 G。避免 Global Sched Lock。<br>2.每个 M 运行都需要一个 MCache 结构。M Pool 中通常有较多 M，但执行的只有几个，为每个池子中的每个 M 分配一个 MCache 则会形成不必要的浪费，通过把 cache 从 M 移到 P，每个运行的 M 都有关联的 P，这样只有运行的 M 才有自己的 MCache。</p>\n</blockquote>\n<h4 id=\"3-Goroutine-vs-OS-thread-有什么区别？\"><a href=\"#3-Goroutine-vs-OS-thread-有什么区别？\" class=\"headerlink\" title=\"3.Goroutine vs OS thread 有什么区别？\"></a>3.Goroutine vs OS thread 有什么区别？</h4><blockquote>\n<p>其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。</p>\n</blockquote>\n<h4 id=\"4-sysmon功能是什么？\"><a href=\"#4-sysmon功能是什么？\" class=\"headerlink\" title=\"4.sysmon功能是什么？\"></a>4.sysmon功能是什么？</h4><blockquote>\n<p>释放闲置超过5分钟的span物理内存；<br>如果超过2分钟没有垃圾回收，强制执行；<br>将长时间未处理的netpoll结果添加到任务队列；<br>向长时间运行的G任务发出抢占调度；<br>收回因syscall长时间阻塞的P；</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjo5eg4hm0003lls6r4xf455t","category_id":"cjo5eg4hw0005lls6p09h40ye","_id":"cjo5eg4i8000ells6jf40i4m6"},{"post_id":"cjo5eg4hq0004lls6g5wio7mh","category_id":"cjo5eg4i5000alls68gdp5y4i","_id":"cjo5eg4ie000llls60nv5yq8y"},{"post_id":"cjo5eg4hy0007lls6mknsj9ws","category_id":"cjo5eg4hw0005lls6p09h40ye","_id":"cjo5eg4if000olls6l6fzk89s"},{"post_id":"cjo5eg4i10008lls62wp2xvm6","category_id":"cjo5eg4ie000klls62jcvx9lq","_id":"cjo5eg4ig000rlls6nw8n52k7"},{"post_id":"cjo5eg4i30009lls632gas43n","category_id":"cjo5eg4if000plls6subeyezj","_id":"cjo5eg4ig000wlls6q94jsgpl"},{"post_id":"cjo5eg4i6000clls612cs13ho","category_id":"cjo5eg4ig000tlls6qbfa2fny","_id":"cjo5eg4ih000zlls64i9ov4wk"},{"post_id":"cjo5eg4i7000dlls6uckqgas1","category_id":"cjo5eg4ig000ylls6qtm53rv8","_id":"cjo5eg4ii0014lls65p8t8z4j"},{"post_id":"cjo5eg4ic000hlls6i0hdis53","category_id":"cjo5eg4ig000ylls6qtm53rv8","_id":"cjo5eg4ij0017lls6zlqomtfx"},{"post_id":"cjo5eg4l9001dlls62zalvpek","category_id":"cjo5eg4lb001flls602h6rerg","_id":"cjo5eg4ll001plls6nnlhjgth"},{"post_id":"cjo5eg4li001nlls6oyym7a2v","category_id":"cjo5eg4lg001klls6pr9arjb9","_id":"cjo5eg4lm001tlls6g92jhq8r"},{"post_id":"cjo5eg4la001ells6sjoyss4c","category_id":"cjo5eg4lg001klls6pr9arjb9","_id":"cjo5eg4lo001wlls649clhhbi"},{"post_id":"cjo5eg4lk001olls6b99ucu5n","category_id":"cjo5eg4lg001klls6pr9arjb9","_id":"cjo5eg4lo001ylls6avr5i9ey"},{"post_id":"cjo5eg4lb001hlls6gb9og3pl","category_id":"cjo5eg4lg001klls6pr9arjb9","_id":"cjo5eg4lp0021lls6fxvkqvd3"},{"post_id":"cjo5eg4le001ills6vou4usy2","category_id":"cjo5eg4lg001klls6pr9arjb9","_id":"cjo5eg4ls0023lls65zygbnkl"},{"post_id":"cjo5eg4lf001jlls6natb5i3a","category_id":"cjo5eg4lg001klls6pr9arjb9","_id":"cjo5eg4lt0026lls6u0h96yfl"}],"PostTag":[{"post_id":"cjo5eg4hm0003lls6r4xf455t","tag_id":"cjo5eg4hy0006lls6hkoifmy6","_id":"cjo5eg4ic000ills63dhsqobq"},{"post_id":"cjo5eg4hm0003lls6r4xf455t","tag_id":"cjo5eg4i5000blls68weu6my6","_id":"cjo5eg4id000jlls6cb0pvumv"},{"post_id":"cjo5eg4hq0004lls6g5wio7mh","tag_id":"cjo5eg4i9000glls6mipdnfmg","_id":"cjo5eg4if000nlls6feqh57r2"},{"post_id":"cjo5eg4hy0007lls6mknsj9ws","tag_id":"cjo5eg4hy0006lls6hkoifmy6","_id":"cjo5eg4ig000ulls6ah94b52d"},{"post_id":"cjo5eg4hy0007lls6mknsj9ws","tag_id":"cjo5eg4i5000blls68weu6my6","_id":"cjo5eg4ig000vlls6bgm33vk3"},{"post_id":"cjo5eg4i10008lls62wp2xvm6","tag_id":"cjo5eg4ig000slls6i2d02iut","_id":"cjo5eg4ii0012lls6jws0c82v"},{"post_id":"cjo5eg4i10008lls62wp2xvm6","tag_id":"cjo5eg4ig000xlls6k0jrn9jj","_id":"cjo5eg4ii0013lls615bsmdtw"},{"post_id":"cjo5eg4i30009lls632gas43n","tag_id":"cjo5eg4ih0010lls6eygv24jq","_id":"cjo5eg4ii0016lls6407551pq"},{"post_id":"cjo5eg4i6000clls612cs13ho","tag_id":"cjo5eg4ii0015lls66y7sqx00","_id":"cjo5eg4ik0019lls6000ii87z"},{"post_id":"cjo5eg4i7000dlls6uckqgas1","tag_id":"cjo5eg4ij0018lls6r43uij27","_id":"cjo5eg4ik001blls65rh01prb"},{"post_id":"cjo5eg4ic000hlls6i0hdis53","tag_id":"cjo5eg4ik001alls60j28uu5y","_id":"cjo5eg4ik001clls6hp9nnist"},{"post_id":"cjo5eg4l9001dlls62zalvpek","tag_id":"cjo5eg4lb001glls6hg5yodz7","_id":"cjo5eg4lh001mlls6eebrn2ow"},{"post_id":"cjo5eg4la001ells6sjoyss4c","tag_id":"cjo5eg4lh001llls69w1adihj","_id":"cjo5eg4lm001slls6s4uczepd"},{"post_id":"cjo5eg4lb001hlls6gb9og3pl","tag_id":"cjo5eg4ll001rlls68xtrj7dh","_id":"cjo5eg4lo001xlls6ljez0zeg"},{"post_id":"cjo5eg4le001ills6vou4usy2","tag_id":"cjo5eg4ln001vlls6ojgfk33n","_id":"cjo5eg4lr0022lls650axlqbs"},{"post_id":"cjo5eg4lf001jlls6natb5i3a","tag_id":"cjo5eg4ln001vlls6ojgfk33n","_id":"cjo5eg4ls0025lls6tdm9ed8g"},{"post_id":"cjo5eg4li001nlls6oyym7a2v","tag_id":"cjo5eg4ln001vlls6ojgfk33n","_id":"cjo5eg4lu0028lls6y9jd7xwg"},{"post_id":"cjo5eg4lk001olls6b99ucu5n","tag_id":"cjo5eg4ln001vlls6ojgfk33n","_id":"cjo5eg4lu0029lls6w1j3gg4g"}],"Tag":[{"name":"linux","_id":"cjo5eg4hy0006lls6hkoifmy6"},{"name":"cmd","_id":"cjo5eg4i5000blls68weu6my6"},{"name":"标签","_id":"cjo5eg4i9000glls6mipdnfmg"},{"name":"计划","_id":"cjo5eg4ig000slls6i2d02iut"},{"name":"目标","_id":"cjo5eg4ig000xlls6k0jrn9jj"},{"name":"roadmap","_id":"cjo5eg4ih0010lls6eygv24jq"},{"name":"todo","_id":"cjo5eg4ii0015lls66y7sqx00"},{"name":"git","_id":"cjo5eg4ij0018lls6r43uij27"},{"name":"vscode","_id":"cjo5eg4ik001alls60j28uu5y"},{"name":"mapreduce","_id":"cjo5eg4lb001glls6hg5yodz7"},{"name":"buffer","_id":"cjo5eg4lh001llls69w1adihj"},{"name":"标准库","_id":"cjo5eg4ll001rlls68xtrj7dh"},{"name":"go","_id":"cjo5eg4ln001vlls6ojgfk33n"}]}}